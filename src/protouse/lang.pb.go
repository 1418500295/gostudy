// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.6.1
// source: lang.protos

package protouse

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)
type LangType int32

const (
	LangType_LangType_Sport                      LangType = 0
	LangType_LangType_MarketType                 LangType = 1
	LangType_LangType_Selection                  LangType = 2
	LangType_LangType_Category                   LangType = 3
	LangType_LangType_MatchStatus                LangType = 4
	LangType_LangType_ErrorCod                   LangType = 5
	LangType_LangType_BetStatus                  LangType = 6
	LangType_LangType_Player                     LangType = 7
	LangType_LangType_Competitor                 LangType = 8 // team as competitor
	LangType_LangType_Tournament                 LangType = 9
	LangType_LangType_Outright                   LangType = 10 // outright variant id check here
	LangType_LangType_SelectionStatus            LangType = 11
	LangType_LangType_BetType                    LangType = 12
	LangType_LangType_TransactionType            LangType = 13
	LangType_LangType_SelectionStatus_Backoffice LangType = 14
)

// Enum value maps for LangType.
var (
	LangType_name = map[int32]string{
		0:  "LangType_Sport",
		1:  "LangType_MarketType",
		2:  "LangType_Selection",
		3:  "LangType_Category",
		4:  "LangType_MatchStatus",
		5:  "LangType_ErrorCod",
		6:  "LangType_BetStatus",
		7:  "LangType_Player",
		8:  "LangType_Competitor",
		9:  "LangType_Tournament",
		10: "LangType_Outright",
		11: "LangType_SelectionStatus",
		12: "LangType_BetType",
		13: "LangType_TransactionType",
		14: "LangType_SelectionStatus_Backoffice",
	}
	LangType_value = map[string]int32{
		"LangType_Sport":                      0,
		"LangType_MarketType":                 1,
		"LangType_Selection":                  2,
		"LangType_Category":                   3,
		"LangType_MatchStatus":                4,
		"LangType_ErrorCod":                   5,
		"LangType_BetStatus":                  6,
		"LangType_Player":                     7,
		"LangType_Competitor":                 8,
		"LangType_Tournament":                 9,
		"LangType_Outright":                   10,
		"LangType_SelectionStatus":            11,
		"LangType_BetType":                    12,
		"LangType_TransactionType":            13,
		"LangType_SelectionStatus_Backoffice": 14,
	}
)

func (x LangType) Enum() *LangType {
	p := new(LangType)
	*p = x
	return p
}

func (x LangType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LangType) Descriptor() protoreflect.EnumDescriptor {
	return file_lang_proto_enumTypes[0].Descriptor()
}

func (LangType) Type() protoreflect.EnumType {
	return &file_lang_proto_enumTypes[0]
}

func (x LangType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LangType.Descriptor instead.
func (LangType) EnumDescriptor() ([]byte, []int) {
	return file_lang_proto_rawDescGZIP(), []int{0}
}

type TranslationScope int32

const (
	TranslationScope_TranslationScope_none TranslationScope = 0
	TranslationScope_TranslationScope_Full TranslationScope = 1
	TranslationScope_TranslationScope_Abbr TranslationScope = 2
	TranslationScope_TranslationScope_All  TranslationScope = 3
)

// Enum value maps for TranslationScope.
var (
	TranslationScope_name = map[int32]string{
		0: "TranslationScope_none",
		1: "TranslationScope_Full",
		2: "TranslationScope_Abbr",
		3: "TranslationScope_All",
	}
	TranslationScope_value = map[string]int32{
		"TranslationScope_none": 0,
		"TranslationScope_Full": 1,
		"TranslationScope_Abbr": 2,
		"TranslationScope_All":  3,
	}
)

func (x TranslationScope) Enum() *TranslationScope {
	p := new(TranslationScope)
	*p = x
	return p
}

func (x TranslationScope) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TranslationScope) Descriptor() protoreflect.EnumDescriptor {
	return file_lang_proto_enumTypes[1].Descriptor()
}

func (TranslationScope) Type() protoreflect.EnumType {
	return &file_lang_proto_enumTypes[1]
}

func (x TranslationScope) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TranslationScope.Descriptor instead.
func (TranslationScope) EnumDescriptor() ([]byte, []int) {
	return file_lang_proto_rawDescGZIP(), []int{1}
}

type Ids struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids []uint64 `protobuf:"varint,1,rep,packed,name=ids,proto3" json:"ids,omitempty"`
}

func (x *Ids) Reset() {
	*x = Ids{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lang_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ids) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ids) ProtoMessage() {}

func (x *Ids) ProtoReflect() protoreflect.Message {
	mi := &file_lang_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ids.ProtoReflect.Descriptor instead.
func (*Ids) Descriptor() ([]byte, []int) {
	return file_lang_proto_rawDescGZIP(), []int{0}
}

func (x *Ids) GetIds() []uint64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

//根據 類型，id，去查詢對應翻譯
type LangReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Lang  string           `protobuf:"bytes,1,opt,name=lang,proto3" json:"lang,omitempty"`
	Scope TranslationScope `protobuf:"varint,2,opt,name=scope,proto3,enum=localization.TranslationScope" json:"scope,omitempty"`                                                      //(1 名稱,2 縮寫，3: 2者都 . 默認為1 )
	Param map[uint32]*Ids  `protobuf:"bytes,3,rep,name=Param,proto3" json:"Param,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // uint32 為 類型id， ids為對應類型 id序列 LangType
}

func (x *LangReq) Reset() {
	*x = LangReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lang_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LangReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LangReq) ProtoMessage() {}

func (x *LangReq) ProtoReflect() protoreflect.Message {
	mi := &file_lang_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LangReq.ProtoReflect.Descriptor instead.
func (*LangReq) Descriptor() ([]byte, []int) {
	return file_lang_proto_rawDescGZIP(), []int{1}
}

func (x *LangReq) GetLang() string {
	if x != nil {
		return x.Lang
	}
	return ""
}

func (x *LangReq) GetScope() TranslationScope {
	if x != nil {
		return x.Scope
	}
	return TranslationScope_TranslationScope_none
}

func (x *LangReq) GetParam() map[uint32]*Ids {
	if x != nil {
		return x.Param
	}
	return nil
}

type LangResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result map[uint64]string `protobuf:"bytes,1,rep,name=Result,proto3" json:"Result,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // uint64 : lang id
}

func (x *LangResult) Reset() {
	*x = LangResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lang_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LangResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LangResult) ProtoMessage() {}

func (x *LangResult) ProtoReflect() protoreflect.Message {
	mi := &file_lang_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LangResult.ProtoReflect.Descriptor instead.
func (*LangResult) Descriptor() ([]byte, []int) {
	return file_lang_proto_rawDescGZIP(), []int{2}
}

func (x *LangResult) GetResult() map[uint64]string {
	if x != nil {
		return x.Result
	}
	return nil
}

type LangResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Lang string                 `protobuf:"bytes,1,opt,name=lang,proto3" json:"lang,omitempty"`
	Full map[uint32]*LangResult `protobuf:"bytes,2,rep,name=full,proto3" json:"full,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` //名稱 //uint32 : type id key = LangType
	Abbr map[uint32]*LangResult `protobuf:"bytes,3,rep,name=abbr,proto3" json:"abbr,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` //縮寫 key = LangType
}

func (x *LangResp) Reset() {
	*x = LangResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lang_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LangResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LangResp) ProtoMessage() {}

func (x *LangResp) ProtoReflect() protoreflect.Message {
	mi := &file_lang_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LangResp.ProtoReflect.Descriptor instead.
func (*LangResp) Descriptor() ([]byte, []int) {
	return file_lang_proto_rawDescGZIP(), []int{3}
}

func (x *LangResp) GetLang() string {
	if x != nil {
		return x.Lang
	}
	return ""
}

func (x *LangResp) GetFull() map[uint32]*LangResult {
	if x != nil {
		return x.Full
	}
	return nil
}

func (x *LangResp) GetAbbr() map[uint32]*LangResult {
	if x != nil {
		return x.Abbr
	}
	return nil
}

type MainFileReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Lang  string     `protobuf:"bytes,1,opt,name=lang,proto3" json:"lang,omitempty"`
	Scope int32      `protobuf:"varint,2,opt,name=scope,proto3" json:"scope,omitempty"`                                   //(1 名稱,2 縮寫，3: 2者都 . 默認為1 )
	Types []LangType `protobuf:"varint,3,rep,packed,name=types,proto3,enum=localization.LangType" json:"types,omitempty"` //如 ids 為空則查詢 type 為 1-6 所有數據
}

func (x *MainFileReq) Reset() {
	*x = MainFileReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lang_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MainFileReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MainFileReq) ProtoMessage() {}

func (x *MainFileReq) ProtoReflect() protoreflect.Message {
	mi := &file_lang_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MainFileReq.ProtoReflect.Descriptor instead.
func (*MainFileReq) Descriptor() ([]byte, []int) {
	return file_lang_proto_rawDescGZIP(), []int{4}
}

func (x *MainFileReq) GetLang() string {
	if x != nil {
		return x.Lang
	}
	return ""
}

func (x *MainFileReq) GetScope() int32 {
	if x != nil {
		return x.Scope
	}
	return 0
}

func (x *MainFileReq) GetTypes() []LangType {
	if x != nil {
		return x.Types
	}
	return nil
}

type Outright struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MarketType uint64 `protobuf:"varint,1,opt,name=market_type,json=marketType,proto3" json:"market_type,omitempty"`
	Variant    string `protobuf:"bytes,2,opt,name=variant,proto3" json:"variant,omitempty"`
}

func (x *Outright) Reset() {
	*x = Outright{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lang_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Outright) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Outright) ProtoMessage() {}

func (x *Outright) ProtoReflect() protoreflect.Message {
	mi := &file_lang_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Outright.ProtoReflect.Descriptor instead.
func (*Outright) Descriptor() ([]byte, []int) {
	return file_lang_proto_rawDescGZIP(), []int{5}
}

func (x *Outright) GetMarketType() uint64 {
	if x != nil {
		return x.MarketType
	}
	return 0
}

func (x *Outright) GetVariant() string {
	if x != nil {
		return x.Variant
	}
	return ""
}

type TranslateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Param     map[uint32]*Ids `protobuf:"bytes,1,rep,name=Param,proto3" json:"Param,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // uint32 為 7,8,9 here， ids為對應類型 id序列 LangType
	Outrights []*Outright     `protobuf:"bytes,2,rep,name=outrights,proto3" json:"outrights,omitempty"`                                                                                  // 10
}

func (x *TranslateReq) Reset() {
	*x = TranslateReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lang_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TranslateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TranslateReq) ProtoMessage() {}

func (x *TranslateReq) ProtoReflect() protoreflect.Message {
	mi := &file_lang_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TranslateReq.ProtoReflect.Descriptor instead.
func (*TranslateReq) Descriptor() ([]byte, []int) {
	return file_lang_proto_rawDescGZIP(), []int{6}
}

func (x *TranslateReq) GetParam() map[uint32]*Ids {
	if x != nil {
		return x.Param
	}
	return nil
}

func (x *TranslateReq) GetOutrights() []*Outright {
	if x != nil {
		return x.Outrights
	}
	return nil
}

type UpdateTranslationReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// entity type=8  //Competitor
	EntityType LangType `protobuf:"varint,1,opt,name=entityType,proto3,enum=localization.LangType" json:"entityType,omitempty"`
	// use entityId can find lang_xx translation record
	//  example:2636
	EntityId uint64 `protobuf:"varint,2,opt,name=entityId,proto3" json:"entityId,omitempty"`
	// when update the market name,must provide the sport id
	SportId uint32 `protobuf:"varint,3,opt,name=sportId,proto3" json:"sportId,omitempty"`
	// follow the table name
	// updateDataMap["zh"]="柏林人AK 07"  update tb lang_zh where id= 2636
	// updateDataMap["en"]="Berliner AK 07"  update tb lang_en where id= 2636
	UpdateDataMap map[string]string `protobuf:"bytes,4,rep,name=updateDataMap,proto3" json:"updateDataMap,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *UpdateTranslationReq) Reset() {
	*x = UpdateTranslationReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lang_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateTranslationReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTranslationReq) ProtoMessage() {}

func (x *UpdateTranslationReq) ProtoReflect() protoreflect.Message {
	mi := &file_lang_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTranslationReq.ProtoReflect.Descriptor instead.
func (*UpdateTranslationReq) Descriptor() ([]byte, []int) {
	return file_lang_proto_rawDescGZIP(), []int{7}
}

func (x *UpdateTranslationReq) GetEntityType() LangType {
	if x != nil {
		return x.EntityType
	}
	return LangType_LangType_Sport
}

func (x *UpdateTranslationReq) GetEntityId() uint64 {
	if x != nil {
		return x.EntityId
	}
	return 0
}

func (x *UpdateTranslationReq) GetSportId() uint32 {
	if x != nil {
		return x.SportId
	}
	return 0
}

func (x *UpdateTranslationReq) GetUpdateDataMap() map[string]string {
	if x != nil {
		return x.UpdateDataMap
	}
	return nil
}

// ============================= search =============================
type StrIds struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids []string `protobuf:"bytes,1,rep,name=ids,proto3" json:"ids,omitempty"`
}

func (x *StrIds) Reset() {
	*x = StrIds{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lang_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StrIds) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StrIds) ProtoMessage() {}

func (x *StrIds) ProtoReflect() protoreflect.Message {
	mi := &file_lang_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StrIds.ProtoReflect.Descriptor instead.
func (*StrIds) Descriptor() ([]byte, []int) {
	return file_lang_proto_rawDescGZIP(), []int{8}
}

func (x *StrIds) GetIds() []string {
	if x != nil {
		return x.Ids
	}
	return nil
}

type SearchReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Keyword string `protobuf:"bytes,1,opt,name=keyword,proto3" json:"keyword,omitempty"`
	Lang    string `protobuf:"bytes,2,opt,name=lang,proto3" json:"lang,omitempty"`
}

func (x *SearchReq) Reset() {
	*x = SearchReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lang_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchReq) ProtoMessage() {}

func (x *SearchReq) ProtoReflect() protoreflect.Message {
	mi := &file_lang_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchReq.ProtoReflect.Descriptor instead.
func (*SearchReq) Descriptor() ([]byte, []int) {
	return file_lang_proto_rawDescGZIP(), []int{9}
}

func (x *SearchReq) GetKeyword() string {
	if x != nil {
		return x.Keyword
	}
	return ""
}

func (x *SearchReq) GetLang() string {
	if x != nil {
		return x.Lang
	}
	return ""
}

type SearchResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Param map[uint32]*StrIds `protobuf:"bytes,1,rep,name=Param,proto3" json:"Param,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *SearchResp) Reset() {
	*x = SearchResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lang_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchResp) ProtoMessage() {}

func (x *SearchResp) ProtoReflect() protoreflect.Message {
	mi := &file_lang_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchResp.ProtoReflect.Descriptor instead.
func (*SearchResp) Descriptor() ([]byte, []int) {
	return file_lang_proto_rawDescGZIP(), []int{10}
}

func (x *SearchResp) GetParam() map[uint32]*StrIds {
	if x != nil {
		return x.Param
	}
	return nil
}

// ============================= search suggestion =============================
type SearchSuggestionReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type     int32              `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
	SportId  int32              `protobuf:"varint,2,opt,name=sportId,proto3" json:"sportId,omitempty"`
	Ids      map[uint32]*StrIds `protobuf:"bytes,3,rep,name=ids,proto3" json:"ids,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Keyword  string             `protobuf:"bytes,4,opt,name=keyword,proto3" json:"keyword,omitempty"`
	Lang     string             `protobuf:"bytes,5,opt,name=lang,proto3" json:"lang,omitempty"`
	SportIds map[uint32]string  `protobuf:"bytes,6,rep,name=sportIds,proto3" json:"sportIds,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *SearchSuggestionReq) Reset() {
	*x = SearchSuggestionReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lang_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchSuggestionReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchSuggestionReq) ProtoMessage() {}

func (x *SearchSuggestionReq) ProtoReflect() protoreflect.Message {
	mi := &file_lang_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchSuggestionReq.ProtoReflect.Descriptor instead.
func (*SearchSuggestionReq) Descriptor() ([]byte, []int) {
	return file_lang_proto_rawDescGZIP(), []int{11}
}

func (x *SearchSuggestionReq) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *SearchSuggestionReq) GetSportId() int32 {
	if x != nil {
		return x.SportId
	}
	return 0
}

func (x *SearchSuggestionReq) GetIds() map[uint32]*StrIds {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *SearchSuggestionReq) GetKeyword() string {
	if x != nil {
		return x.Keyword
	}
	return ""
}

func (x *SearchSuggestionReq) GetLang() string {
	if x != nil {
		return x.Lang
	}
	return ""
}

func (x *SearchSuggestionReq) GetSportIds() map[uint32]string {
	if x != nil {
		return x.SportIds
	}
	return nil
}

type SearchBaseSchema struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Id       string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	SubCount uint64 `protobuf:"varint,3,opt,name=subCount,proto3" json:"subCount,omitempty"`
	Type     int32  `protobuf:"varint,4,opt,name=type,proto3" json:"type,omitempty"`
	SportId  uint32 `protobuf:"varint,5,opt,name=sportId,proto3" json:"sportId,omitempty"`
	IsLive   uint32 `protobuf:"varint,6,opt,name=isLive,proto3" json:"isLive,omitempty"`
}

func (x *SearchBaseSchema) Reset() {
	*x = SearchBaseSchema{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lang_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchBaseSchema) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchBaseSchema) ProtoMessage() {}

func (x *SearchBaseSchema) ProtoReflect() protoreflect.Message {
	mi := &file_lang_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchBaseSchema.ProtoReflect.Descriptor instead.
func (*SearchBaseSchema) Descriptor() ([]byte, []int) {
	return file_lang_proto_rawDescGZIP(), []int{12}
}

func (x *SearchBaseSchema) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SearchBaseSchema) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *SearchBaseSchema) GetSubCount() uint64 {
	if x != nil {
		return x.SubCount
	}
	return 0
}

func (x *SearchBaseSchema) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *SearchBaseSchema) GetSportId() uint32 {
	if x != nil {
		return x.SportId
	}
	return 0
}

func (x *SearchBaseSchema) GetIsLive() uint32 {
	if x != nil {
		return x.IsLive
	}
	return 0
}

type SearchBaseSchemaList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type   int32               `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
	IsLive uint32              `protobuf:"varint,2,opt,name=isLive,proto3" json:"isLive,omitempty"`
	List   []*SearchBaseSchema `protobuf:"bytes,3,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *SearchBaseSchemaList) Reset() {
	*x = SearchBaseSchemaList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lang_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchBaseSchemaList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchBaseSchemaList) ProtoMessage() {}

func (x *SearchBaseSchemaList) ProtoReflect() protoreflect.Message {
	mi := &file_lang_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchBaseSchemaList.ProtoReflect.Descriptor instead.
func (*SearchBaseSchemaList) Descriptor() ([]byte, []int) {
	return file_lang_proto_rawDescGZIP(), []int{13}
}

func (x *SearchBaseSchemaList) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *SearchBaseSchemaList) GetIsLive() uint32 {
	if x != nil {
		return x.IsLive
	}
	return 0
}

func (x *SearchBaseSchemaList) GetList() []*SearchBaseSchema {
	if x != nil {
		return x.List
	}
	return nil
}

type SearchSuggestionResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Res []*SearchBaseSchemaList `protobuf:"bytes,1,rep,name=res,proto3" json:"res,omitempty"`
}

func (x *SearchSuggestionResp) Reset() {
	*x = SearchSuggestionResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lang_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchSuggestionResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchSuggestionResp) ProtoMessage() {}

func (x *SearchSuggestionResp) ProtoReflect() protoreflect.Message {
	mi := &file_lang_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchSuggestionResp.ProtoReflect.Descriptor instead.
func (*SearchSuggestionResp) Descriptor() ([]byte, []int) {
	return file_lang_proto_rawDescGZIP(), []int{14}
}

func (x *SearchSuggestionResp) GetRes() []*SearchBaseSchemaList {
	if x != nil {
		return x.Res
	}
	return nil
}

// ============================= search default =============================
type SearchDefaultReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type     int32             `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
	SportId  int32             `protobuf:"varint,2,opt,name=sportId,proto3" json:"sportId,omitempty"`
	Lang     string            `protobuf:"bytes,3,opt,name=lang,proto3" json:"lang,omitempty"`
	SportIds map[uint32]string `protobuf:"bytes,6,rep,name=sportIds,proto3" json:"sportIds,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *SearchDefaultReq) Reset() {
	*x = SearchDefaultReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lang_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchDefaultReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchDefaultReq) ProtoMessage() {}

func (x *SearchDefaultReq) ProtoReflect() protoreflect.Message {
	mi := &file_lang_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchDefaultReq.ProtoReflect.Descriptor instead.
func (*SearchDefaultReq) Descriptor() ([]byte, []int) {
	return file_lang_proto_rawDescGZIP(), []int{15}
}

func (x *SearchDefaultReq) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *SearchDefaultReq) GetSportId() int32 {
	if x != nil {
		return x.SportId
	}
	return 0
}

func (x *SearchDefaultReq) GetLang() string {
	if x != nil {
		return x.Lang
	}
	return ""
}

func (x *SearchDefaultReq) GetSportIds() map[uint32]string {
	if x != nil {
		return x.SportIds
	}
	return nil
}

type SearchDefaultResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Res []*SearchBaseSchemaList `protobuf:"bytes,1,rep,name=res,proto3" json:"res,omitempty"`
}

func (x *SearchDefaultResp) Reset() {
	*x = SearchDefaultResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lang_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchDefaultResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchDefaultResp) ProtoMessage() {}

func (x *SearchDefaultResp) ProtoReflect() protoreflect.Message {
	mi := &file_lang_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchDefaultResp.ProtoReflect.Descriptor instead.
func (*SearchDefaultResp) Descriptor() ([]byte, []int) {
	return file_lang_proto_rawDescGZIP(), []int{16}
}

func (x *SearchDefaultResp) GetRes() []*SearchBaseSchemaList {
	if x != nil {
		return x.Res
	}
	return nil
}

type SearchEventList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchIds []string `protobuf:"bytes,1,rep,name=matchIds,proto3" json:"matchIds,omitempty"`
}

func (x *SearchEventList) Reset() {
	*x = SearchEventList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lang_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchEventList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchEventList) ProtoMessage() {}

func (x *SearchEventList) ProtoReflect() protoreflect.Message {
	mi := &file_lang_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchEventList.ProtoReflect.Descriptor instead.
func (*SearchEventList) Descriptor() ([]byte, []int) {
	return file_lang_proto_rawDescGZIP(), []int{17}
}

func (x *SearchEventList) GetMatchIds() []string {
	if x != nil {
		return x.MatchIds
	}
	return nil
}

type SearchEventResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result map[uint32]*SearchEventList `protobuf:"bytes,1,rep,name=result,proto3" json:"result,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // key: is_live value: match id list
}

func (x *SearchEventResp) Reset() {
	*x = SearchEventResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lang_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchEventResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchEventResp) ProtoMessage() {}

func (x *SearchEventResp) ProtoReflect() protoreflect.Message {
	mi := &file_lang_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchEventResp.ProtoReflect.Descriptor instead.
func (*SearchEventResp) Descriptor() ([]byte, []int) {
	return file_lang_proto_rawDescGZIP(), []int{18}
}

func (x *SearchEventResp) GetResult() map[uint32]*SearchEventList {
	if x != nil {
		return x.Result
	}
	return nil
}

// ============================= search suggestion and sport type
// =============================
type SearchAndSportTypeList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SportId   uint32                  `protobuf:"varint,1,opt,name=SportId,proto3" json:"SportId,omitempty"`
	SportName string                  `protobuf:"bytes,2,opt,name=SportName,proto3" json:"SportName,omitempty"`
	Res       []*SearchBaseSchemaList `protobuf:"bytes,3,rep,name=res,proto3" json:"res,omitempty"`
}

func (x *SearchAndSportTypeList) Reset() {
	*x = SearchAndSportTypeList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lang_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchAndSportTypeList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchAndSportTypeList) ProtoMessage() {}

func (x *SearchAndSportTypeList) ProtoReflect() protoreflect.Message {
	mi := &file_lang_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchAndSportTypeList.ProtoReflect.Descriptor instead.
func (*SearchAndSportTypeList) Descriptor() ([]byte, []int) {
	return file_lang_proto_rawDescGZIP(), []int{19}
}

func (x *SearchAndSportTypeList) GetSportId() uint32 {
	if x != nil {
		return x.SportId
	}
	return 0
}

func (x *SearchAndSportTypeList) GetSportName() string {
	if x != nil {
		return x.SportName
	}
	return ""
}

func (x *SearchAndSportTypeList) GetRes() []*SearchBaseSchemaList {
	if x != nil {
		return x.Res
	}
	return nil
}

type SearchAndSportTypeResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Res []*SearchAndSportTypeList `protobuf:"bytes,1,rep,name=res,proto3" json:"res,omitempty"`
}

func (x *SearchAndSportTypeResp) Reset() {
	*x = SearchAndSportTypeResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lang_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchAndSportTypeResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchAndSportTypeResp) ProtoMessage() {}

func (x *SearchAndSportTypeResp) ProtoReflect() protoreflect.Message {
	mi := &file_lang_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchAndSportTypeResp.ProtoReflect.Descriptor instead.
func (*SearchAndSportTypeResp) Descriptor() ([]byte, []int) {
	return file_lang_proto_rawDescGZIP(), []int{20}
}

func (x *SearchAndSportTypeResp) GetRes() []*SearchAndSportTypeList {
	if x != nil {
		return x.Res
	}
	return nil
}

var File_lang_proto protoreflect.FileDescriptor

var file_lang_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x6c, 0x6f,
	0x63, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x17, 0x0a, 0x03, 0x49, 0x64,
	0x73, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x04, 0x52, 0x03,
	0x69, 0x64, 0x73, 0x22, 0xd8, 0x01, 0x0a, 0x07, 0x4c, 0x61, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x12,
	0x12, 0x0a, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c,
	0x61, 0x6e, 0x67, 0x12, 0x34, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x6f,
	0x70, 0x65, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x36, 0x0a, 0x05, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4c, 0x61, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x2e,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x1a, 0x4b, 0x0a, 0x0a, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x27, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x49, 0x64, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x85,
	0x01, 0x0a, 0x0a, 0x4c, 0x61, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x3c, 0x0a,
	0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4c, 0x61, 0x6e,
	0x67, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x1a, 0x39, 0x0a, 0x0b, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xb0, 0x02, 0x0a, 0x08, 0x4c, 0x61, 0x6e, 0x67, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x12, 0x34, 0x0a, 0x04, 0x66, 0x75, 0x6c, 0x6c, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4c, 0x61, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x2e, 0x46, 0x75,
	0x6c, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x66, 0x75, 0x6c, 0x6c, 0x12, 0x34, 0x0a,
	0x04, 0x61, 0x62, 0x62, 0x72, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6c, 0x6f,
	0x63, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4c, 0x61, 0x6e, 0x67, 0x52,
	0x65, 0x73, 0x70, 0x2e, 0x41, 0x62, 0x62, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x61,
	0x62, 0x62, 0x72, 0x1a, 0x51, 0x0a, 0x09, 0x46, 0x75, 0x6c, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x2e, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x4c, 0x61, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x51, 0x0a, 0x09, 0x41, 0x62, 0x62, 0x72, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2e, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x4c, 0x61, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x65, 0x0a, 0x0b, 0x4d, 0x61, 0x69,
	0x6e, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x61, 0x6e, 0x67,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x12, 0x14, 0x0a, 0x05,
	0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x63, 0x6f,
	0x70, 0x65, 0x12, 0x2c, 0x0a, 0x05, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0e, 0x32, 0x16, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x4c, 0x61, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x05, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x22, 0x45, 0x0a, 0x08, 0x4f, 0x75, 0x74, 0x72, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1f, 0x0a, 0x0b,
	0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0a, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x22, 0xce, 0x01, 0x0a, 0x0c, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x3b, 0x0a, 0x05, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x34, 0x0a, 0x09, 0x6f, 0x75, 0x74, 0x72, 0x69, 0x67, 0x68,
	0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4f, 0x75, 0x74, 0x72, 0x69, 0x67, 0x68, 0x74,
	0x52, 0x09, 0x6f, 0x75, 0x74, 0x72, 0x69, 0x67, 0x68, 0x74, 0x73, 0x1a, 0x4b, 0x0a, 0x0a, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x27, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6c, 0x6f, 0x63,
	0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x49, 0x64, 0x73, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xa3, 0x02, 0x0a, 0x14, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x12, 0x36, 0x0a, 0x0a, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4c, 0x61, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x12,
	0x5b, 0x0a, 0x0d, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x61, 0x70,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x61, 0x70, 0x1a, 0x40, 0x0a, 0x12,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x1a,
	0x0a, 0x06, 0x53, 0x74, 0x72, 0x49, 0x64, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x69, 0x64, 0x73, 0x22, 0x39, 0x0a, 0x09, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f,
	0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6c, 0x61, 0x6e, 0x67, 0x22, 0x97, 0x01, 0x0a, 0x0a, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x39, 0x0a, 0x05, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x2e, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x1a,
	0x4e, 0x0a, 0x0a, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x2a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x74,
	0x72, 0x49, 0x64, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0x87, 0x03, 0x0a, 0x13, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73,
	0x70, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x73, 0x70,
	0x6f, 0x72, 0x74, 0x49, 0x64, 0x12, 0x3c, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x2e, 0x49, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x03,
	0x69, 0x64, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x6c, 0x61, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x61, 0x6e,
	0x67, 0x12, 0x4b, 0x0a, 0x08, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x73, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x2e, 0x53, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x73, 0x1a, 0x4c,
	0x0a, 0x08, 0x49, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2a, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6c, 0x6f,
	0x63, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x72, 0x49, 0x64,
	0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3b, 0x0a, 0x0d,
	0x53, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x98, 0x01, 0x0a, 0x10, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x42, 0x61, 0x73, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x75, 0x62, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x73, 0x75, 0x62, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x69, 0x73, 0x4c, 0x69, 0x76, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x69, 0x73,
	0x4c, 0x69, 0x76, 0x65, 0x22, 0x76, 0x0a, 0x14, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x42, 0x61,
	0x73, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x69, 0x73, 0x4c, 0x69, 0x76, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x06, 0x69, 0x73, 0x4c, 0x69, 0x76, 0x65, 0x12, 0x32, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x42, 0x61, 0x73, 0x65,
	0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x4c, 0x0a, 0x14,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x34, 0x0a, 0x03, 0x72, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x42, 0x61, 0x73, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x03, 0x72, 0x65, 0x73, 0x22, 0xdb, 0x01, 0x0a, 0x10, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x71, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x6c, 0x61, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x61, 0x6e,
	0x67, 0x12, 0x48, 0x0a, 0x08, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x73, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x52, 0x65, 0x71, 0x2e, 0x53, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x08, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x73, 0x1a, 0x3b, 0x0a, 0x0d, 0x53,
	0x70, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x49, 0x0a, 0x11, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x34, 0x0a,
	0x03, 0x72, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6c, 0x6f, 0x63,
	0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x42, 0x61, 0x73, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x03,
	0x72, 0x65, 0x73, 0x22, 0x2d, 0x0a, 0x0f, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x49,
	0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x49,
	0x64, 0x73, 0x22, 0xae, 0x01, 0x0a, 0x0f, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x41, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x1a, 0x58, 0x0a, 0x0b, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x33, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6c, 0x6f, 0x63, 0x61,
	0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0x86, 0x01, 0x0a, 0x16, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x41, 0x6e,
	0x64, 0x53, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x18,
	0x0a, 0x07, 0x53, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x07, 0x53, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x70, 0x6f, 0x72,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x53, 0x70, 0x6f,
	0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x03, 0x72, 0x65, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x42, 0x61, 0x73, 0x65, 0x53, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x03, 0x72, 0x65, 0x73, 0x22, 0x50, 0x0a, 0x16,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x41, 0x6e, 0x64, 0x53, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x36, 0x0a, 0x03, 0x72, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x41, 0x6e, 0x64, 0x53, 0x70, 0x6f, 0x72,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x03, 0x72, 0x65, 0x73, 0x2a, 0x88,
	0x03, 0x0a, 0x08, 0x4c, 0x61, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x0e, 0x4c,
	0x61, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x53, 0x70, 0x6f, 0x72, 0x74, 0x10, 0x00, 0x12,
	0x17, 0x0a, 0x13, 0x4c, 0x61, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x4c, 0x61, 0x6e, 0x67,
	0x54, 0x79, 0x70, 0x65, 0x5f, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x02,
	0x12, 0x15, 0x0a, 0x11, 0x4c, 0x61, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x10, 0x03, 0x12, 0x18, 0x0a, 0x14, 0x4c, 0x61, 0x6e, 0x67, 0x54,
	0x79, 0x70, 0x65, 0x5f, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x10,
	0x04, 0x12, 0x15, 0x0a, 0x11, 0x4c, 0x61, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x10, 0x05, 0x12, 0x16, 0x0a, 0x12, 0x4c, 0x61, 0x6e, 0x67,
	0x54, 0x79, 0x70, 0x65, 0x5f, 0x42, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x10, 0x06,
	0x12, 0x13, 0x0a, 0x0f, 0x4c, 0x61, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x10, 0x07, 0x12, 0x17, 0x0a, 0x13, 0x4c, 0x61, 0x6e, 0x67, 0x54, 0x79, 0x70,
	0x65, 0x5f, 0x43, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x69, 0x74, 0x6f, 0x72, 0x10, 0x08, 0x12, 0x17,
	0x0a, 0x13, 0x4c, 0x61, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x54, 0x6f, 0x75, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x09, 0x12, 0x15, 0x0a, 0x11, 0x4c, 0x61, 0x6e, 0x67, 0x54,
	0x79, 0x70, 0x65, 0x5f, 0x4f, 0x75, 0x74, 0x72, 0x69, 0x67, 0x68, 0x74, 0x10, 0x0a, 0x12, 0x1c,
	0x0a, 0x18, 0x4c, 0x61, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x53, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x10, 0x0b, 0x12, 0x14, 0x0a, 0x10,
	0x4c, 0x61, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x42, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x10, 0x0c, 0x12, 0x1c, 0x0a, 0x18, 0x4c, 0x61, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x10, 0x0d,
	0x12, 0x27, 0x0a, 0x23, 0x4c, 0x61, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x53, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x42, 0x61, 0x63,
	0x6b, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x10, 0x0e, 0x2a, 0x7d, 0x0a, 0x10, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x19, 0x0a,
	0x15, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x6f, 0x70,
	0x65, 0x5f, 0x6e, 0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x5f, 0x46, 0x75, 0x6c,
	0x6c, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x5f, 0x41, 0x62, 0x62, 0x72, 0x10, 0x02, 0x12, 0x18,
	0x0a, 0x14, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x6f,
	0x70, 0x65, 0x5f, 0x41, 0x6c, 0x6c, 0x10, 0x03, 0x42, 0x10, 0x5a, 0x0e, 0x2e, 0x3b, 0x6c, 0x6f,
	0x63, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_lang_proto_rawDescOnce sync.Once
	file_lang_proto_rawDescData = file_lang_proto_rawDesc
)

func file_lang_proto_rawDescGZIP() []byte {
	file_lang_proto_rawDescOnce.Do(func() {
		file_lang_proto_rawDescData = protoimpl.X.CompressGZIP(file_lang_proto_rawDescData)
	})
	return file_lang_proto_rawDescData
}

var file_lang_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_lang_proto_msgTypes = make([]protoimpl.MessageInfo, 32)
var file_lang_proto_goTypes = []interface{}{
	(LangType)(0),                  // 0: localization.LangType
	(TranslationScope)(0),          // 1: localization.TranslationScope
	(*Ids)(nil),                    // 2: localization.Ids
	(*LangReq)(nil),                // 3: localization.LangReq
	(*LangResult)(nil),             // 4: localization.LangResult
	(*LangResp)(nil),               // 5: localization.LangResp
	(*MainFileReq)(nil),            // 6: localization.MainFileReq
	(*Outright)(nil),               // 7: localization.Outright
	(*TranslateReq)(nil),           // 8: localization.TranslateReq
	(*UpdateTranslationReq)(nil),   // 9: localization.UpdateTranslationReq
	(*StrIds)(nil),                 // 10: localization.StrIds
	(*SearchReq)(nil),              // 11: localization.SearchReq
	(*SearchResp)(nil),             // 12: localization.SearchResp
	(*SearchSuggestionReq)(nil),    // 13: localization.SearchSuggestionReq
	(*SearchBaseSchema)(nil),       // 14: localization.SearchBaseSchema
	(*SearchBaseSchemaList)(nil),   // 15: localization.SearchBaseSchemaList
	(*SearchSuggestionResp)(nil),   // 16: localization.SearchSuggestionResp
	(*SearchDefaultReq)(nil),       // 17: localization.SearchDefaultReq
	(*SearchDefaultResp)(nil),      // 18: localization.SearchDefaultResp
	(*SearchEventList)(nil),        // 19: localization.SearchEventList
	(*SearchEventResp)(nil),        // 20: localization.SearchEventResp
	(*SearchAndSportTypeList)(nil), // 21: localization.SearchAndSportTypeList
	(*SearchAndSportTypeResp)(nil), // 22: localization.SearchAndSportTypeResp
	nil,                            // 23: localization.LangReq.ParamEntry
	nil,                            // 24: localization.LangResult.ResultEntry
	nil,                            // 25: localization.LangResp.FullEntry
	nil,                            // 26: localization.LangResp.AbbrEntry
	nil,                            // 27: localization.TranslateReq.ParamEntry
	nil,                            // 28: localization.UpdateTranslationReq.UpdateDataMapEntry
	nil,                            // 29: localization.SearchResp.ParamEntry
	nil,                            // 30: localization.SearchSuggestionReq.IdsEntry
	nil,                            // 31: localization.SearchSuggestionReq.SportIdsEntry
	nil,                            // 32: localization.SearchDefaultReq.SportIdsEntry
	nil,                            // 33: localization.SearchEventResp.ResultEntry
}
var file_lang_proto_depIdxs = []int32{
	1,  // 0: localization.LangReq.scope:type_name -> localization.TranslationScope
	23, // 1: localization.LangReq.Param:type_name -> localization.LangReq.ParamEntry
	24, // 2: localization.LangResult.Result:type_name -> localization.LangResult.ResultEntry
	25, // 3: localization.LangResp.full:type_name -> localization.LangResp.FullEntry
	26, // 4: localization.LangResp.abbr:type_name -> localization.LangResp.AbbrEntry
	0,  // 5: localization.MainFileReq.types:type_name -> localization.LangType
	27, // 6: localization.TranslateReq.Param:type_name -> localization.TranslateReq.ParamEntry
	7,  // 7: localization.TranslateReq.outrights:type_name -> localization.Outright
	0,  // 8: localization.UpdateTranslationReq.entityType:type_name -> localization.LangType
	28, // 9: localization.UpdateTranslationReq.updateDataMap:type_name -> localization.UpdateTranslationReq.UpdateDataMapEntry
	29, // 10: localization.SearchResp.Param:type_name -> localization.SearchResp.ParamEntry
	30, // 11: localization.SearchSuggestionReq.ids:type_name -> localization.SearchSuggestionReq.IdsEntry
	31, // 12: localization.SearchSuggestionReq.sportIds:type_name -> localization.SearchSuggestionReq.SportIdsEntry
	14, // 13: localization.SearchBaseSchemaList.list:type_name -> localization.SearchBaseSchema
	15, // 14: localization.SearchSuggestionResp.res:type_name -> localization.SearchBaseSchemaList
	32, // 15: localization.SearchDefaultReq.sportIds:type_name -> localization.SearchDefaultReq.SportIdsEntry
	15, // 16: localization.SearchDefaultResp.res:type_name -> localization.SearchBaseSchemaList
	33, // 17: localization.SearchEventResp.result:type_name -> localization.SearchEventResp.ResultEntry
	15, // 18: localization.SearchAndSportTypeList.res:type_name -> localization.SearchBaseSchemaList
	21, // 19: localization.SearchAndSportTypeResp.res:type_name -> localization.SearchAndSportTypeList
	2,  // 20: localization.LangReq.ParamEntry.value:type_name -> localization.Ids
	4,  // 21: localization.LangResp.FullEntry.value:type_name -> localization.LangResult
	4,  // 22: localization.LangResp.AbbrEntry.value:type_name -> localization.LangResult
	2,  // 23: localization.TranslateReq.ParamEntry.value:type_name -> localization.Ids
	10, // 24: localization.SearchResp.ParamEntry.value:type_name -> localization.StrIds
	10, // 25: localization.SearchSuggestionReq.IdsEntry.value:type_name -> localization.StrIds
	19, // 26: localization.SearchEventResp.ResultEntry.value:type_name -> localization.SearchEventList
	27, // [27:27] is the sub-list for method output_type
	27, // [27:27] is the sub-list for method input_type
	27, // [27:27] is the sub-list for extension type_name
	27, // [27:27] is the sub-list for extension extendee
	0,  // [0:27] is the sub-list for field type_name
}

func init() { file_lang_proto_init() }
func file_lang_proto_init() {
	if File_lang_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_lang_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ids); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lang_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LangReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lang_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LangResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lang_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LangResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lang_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MainFileReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lang_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Outright); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lang_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TranslateReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lang_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateTranslationReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lang_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StrIds); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lang_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lang_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lang_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchSuggestionReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lang_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchBaseSchema); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lang_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchBaseSchemaList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lang_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchSuggestionResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lang_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchDefaultReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lang_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchDefaultResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lang_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchEventList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lang_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchEventResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lang_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchAndSportTypeList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lang_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchAndSportTypeResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_lang_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   32,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_lang_proto_goTypes,
		DependencyIndexes: file_lang_proto_depIdxs,
		EnumInfos:         file_lang_proto_enumTypes,
		MessageInfos:      file_lang_proto_msgTypes,
	}.Build()
	File_lang_proto = out.File
	file_lang_proto_rawDesc = nil
	file_lang_proto_goTypes = nil
	file_lang_proto_depIdxs = nil
}
