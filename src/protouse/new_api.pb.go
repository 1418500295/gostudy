// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.6.1
// source: new_api.protos

package protouse

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ResponseStatus int32

const (
	// System
	ResponseStatus_UnderMaintenanceMode              ResponseStatus = 0
	ResponseStatus_ResponseStatus_Ok                 ResponseStatus = 11000
	ResponseStatus_ResponseStatus_BadRequest         ResponseStatus = 10001
	ResponseStatus_ResponseStatus_Unauthorized       ResponseStatus = 10002
	ResponseStatus_ResponseStatus_InternalError      ResponseStatus = 10003
	ResponseStatus_ResponseStatus_ServiceUnavailable ResponseStatus = 10004
	ResponseStatus_Error_GeneralSystemError          ResponseStatus = 10005
	// Login Session Related
	ResponseStatus_NoLoginStatus                   ResponseStatus = 12100
	ResponseStatus_LoginTokenOrSessionExpired      ResponseStatus = 12101
	ResponseStatus_NoResponseForTheClient          ResponseStatus = 12102
	ResponseStatus_IncorrectUserInfo               ResponseStatus = 10103
	ResponseStatus_ParameterError                  ResponseStatus = 10104
	ResponseStatus_ProtoUnmarshalError             ResponseStatus = 10105
	ResponseStatus_SystemError                     ResponseStatus = 10106
	ResponseStatus_Error_CannotReachTheAccountInfo ResponseStatus = 10107
	ResponseStatus_Error_CannotReachTheBalanceInfo ResponseStatus = 10108
	// Betting Related
	ResponseStatus_ResponseStatus_PlayerFrozen                               ResponseStatus = 10200
	ResponseStatus_ResponseStatus_InsufficientStake                          ResponseStatus = 12201
	ResponseStatus_ResponseStatus_OutcomeClosed                              ResponseStatus = 12202
	ResponseStatus_ResponseStatus_MatchDuplicate                             ResponseStatus = 12203
	ResponseStatus_ResponseStatus_MatchClose                                 ResponseStatus = 12204
	ResponseStatus_ResponseStatus_RiskExceed                                 ResponseStatus = 12205
	ResponseStatus_ResponseStatus_OddsChanged                                ResponseStatus = 12206
	ResponseStatus_ResponseStatus_LowerThanMinStake                          ResponseStatus = 12217
	ResponseStatus_ExceedThePlayersGeneralProfitLimits                       ResponseStatus = 12208
	ResponseStatus_ExceedTheMaxNumberOfTheMultipleBet                        ResponseStatus = 12209
	ResponseStatus_RelatedContingencyOrBettingOfOutrightMarketsInMultipleBet ResponseStatus = 12210
	ResponseStatus_Error_CannotGetTheMaxStake                                ResponseStatus = 12211
	ResponseStatus_Error_CannotGetTheMaxProfit                               ResponseStatus = 10212
	ResponseStatus_Error_CannotGetTheMultipleSetting                         ResponseStatus = 10213
	ResponseStatus_Error_CannotGetThePlayerGroupSetting                      ResponseStatus = 10214
	ResponseStatus_Error_InspectionTimeout                                   ResponseStatus = 10215
	ResponseStatus_Error_TheBetIDsIsInvalid                                  ResponseStatus = 10216
)

// Enum value maps for ResponseStatus.
var (
	ResponseStatus_name = map[int32]string{
		0:     "UnderMaintenanceMode",
		11000: "ResponseStatus_Ok",
		10001: "ResponseStatus_BadRequest",
		10002: "ResponseStatus_Unauthorized",
		10003: "ResponseStatus_InternalError",
		10004: "ResponseStatus_ServiceUnavailable",
		10005: "Error_GeneralSystemError",
		12100: "NoLoginStatus",
		12101: "LoginTokenOrSessionExpired",
		12102: "NoResponseForTheClient",
		10103: "IncorrectUserInfo",
		10104: "ParameterError",
		10105: "ProtoUnmarshalError",
		10106: "SystemError",
		10107: "Error_CannotReachTheAccountInfo",
		10108: "Error_CannotReachTheBalanceInfo",
		10200: "ResponseStatus_PlayerFrozen",
		12201: "ResponseStatus_InsufficientStake",
		12202: "ResponseStatus_OutcomeClosed",
		12203: "ResponseStatus_MatchDuplicate",
		12204: "ResponseStatus_MatchClose",
		12205: "ResponseStatus_RiskExceed",
		12206: "ResponseStatus_OddsChanged",
		12217: "ResponseStatus_LowerThanMinStake",
		12208: "ExceedThePlayersGeneralProfitLimits",
		12209: "ExceedTheMaxNumberOfTheMultipleBet",
		12210: "RelatedContingencyOrBettingOfOutrightMarketsInMultipleBet",
		12211: "Error_CannotGetTheMaxStake",
		10212: "Error_CannotGetTheMaxProfit",
		10213: "Error_CannotGetTheMultipleSetting",
		10214: "Error_CannotGetThePlayerGroupSetting",
		10215: "Error_InspectionTimeout",
		10216: "Error_TheBetIDsIsInvalid",
	}
	ResponseStatus_value = map[string]int32{
		"UnderMaintenanceMode":                                      0,
		"ResponseStatus_Ok":                                         11000,
		"ResponseStatus_BadRequest":                                 10001,
		"ResponseStatus_Unauthorized":                               10002,
		"ResponseStatus_InternalError":                              10003,
		"ResponseStatus_ServiceUnavailable":                         10004,
		"Error_GeneralSystemError":                                  10005,
		"NoLoginStatus":                                             12100,
		"LoginTokenOrSessionExpired":                                12101,
		"NoResponseForTheClient":                                    12102,
		"IncorrectUserInfo":                                         10103,
		"ParameterError":                                            10104,
		"ProtoUnmarshalError":                                       10105,
		"SystemError":                                               10106,
		"Error_CannotReachTheAccountInfo":                           10107,
		"Error_CannotReachTheBalanceInfo":                           10108,
		"ResponseStatus_PlayerFrozen":                               10200,
		"ResponseStatus_InsufficientStake":                          12201,
		"ResponseStatus_OutcomeClosed":                              12202,
		"ResponseStatus_MatchDuplicate":                             12203,
		"ResponseStatus_MatchClose":                                 12204,
		"ResponseStatus_RiskExceed":                                 12205,
		"ResponseStatus_OddsChanged":                                12206,
		"ResponseStatus_LowerThanMinStake":                          12217,
		"ExceedThePlayersGeneralProfitLimits":                       12208,
		"ExceedTheMaxNumberOfTheMultipleBet":                        12209,
		"RelatedContingencyOrBettingOfOutrightMarketsInMultipleBet": 12210,
		"Error_CannotGetTheMaxStake":                                12211,
		"Error_CannotGetTheMaxProfit":                               10212,
		"Error_CannotGetTheMultipleSetting":                         10213,
		"Error_CannotGetThePlayerGroupSetting":                      10214,
		"Error_InspectionTimeout":                                   10215,
		"Error_TheBetIDsIsInvalid":                                  10216,
	}
)

func (x ResponseStatus) Enum() *ResponseStatus {
	p := new(ResponseStatus)
	*p = x
	return p
}

func (x ResponseStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ResponseStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_new_api_proto_enumTypes[0].Descriptor()
}

func (ResponseStatus) Type() protoreflect.EnumType {
	return &file_new_api_proto_enumTypes[0]
}

func (x ResponseStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ResponseStatus.Descriptor instead.
func (ResponseStatus) EnumDescriptor() ([]byte, []int) {
	return file_new_api_proto_rawDescGZIP(), []int{0}
}

type MatchStatus int32

const (
	MatchStatus_MatchStatus_Ended       MatchStatus = 0
	MatchStatus_MatchStatus_InProgress  MatchStatus = 1
	MatchStatus_MatchStatus_Pending     MatchStatus = 2
	MatchStatus_MatchStatus_Canceled    MatchStatus = 3
	MatchStatus_MatchStatus_Interrupted MatchStatus = 4
	MatchStatus_MatchStatus_Unknown     MatchStatus = 10
)

// Enum value maps for MatchStatus.
var (
	MatchStatus_name = map[int32]string{
		0:  "MatchStatus_Ended",
		1:  "MatchStatus_InProgress",
		2:  "MatchStatus_Pending",
		3:  "MatchStatus_Canceled",
		4:  "MatchStatus_Interrupted",
		10: "MatchStatus_Unknown",
	}
	MatchStatus_value = map[string]int32{
		"MatchStatus_Ended":       0,
		"MatchStatus_InProgress":  1,
		"MatchStatus_Pending":     2,
		"MatchStatus_Canceled":    3,
		"MatchStatus_Interrupted": 4,
		"MatchStatus_Unknown":     10,
	}
)

func (x MatchStatus) Enum() *MatchStatus {
	p := new(MatchStatus)
	*p = x
	return p
}

func (x MatchStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MatchStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_new_api_proto_enumTypes[1].Descriptor()
}

func (MatchStatus) Type() protoreflect.EnumType {
	return &file_new_api_proto_enumTypes[1]
}

func (x MatchStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MatchStatus.Descriptor instead.
func (MatchStatus) EnumDescriptor() ([]byte, []int) {
	return file_new_api_proto_rawDescGZIP(), []int{1}
}

type MarketAndOutcomeStatus int32

const (
	MarketAndOutcomeStatus_MarketAndOutcomeStatus_Unknown   MarketAndOutcomeStatus = 0
	MarketAndOutcomeStatus_MarketAndOutcomeStatus_Open      MarketAndOutcomeStatus = 1
	MarketAndOutcomeStatus_MarketAndOutcomeStatus_Suspended MarketAndOutcomeStatus = 2
	MarketAndOutcomeStatus_MarketAndOutcomeStatus_Closed    MarketAndOutcomeStatus = 3
)

// Enum value maps for MarketAndOutcomeStatus.
var (
	MarketAndOutcomeStatus_name = map[int32]string{
		0: "MarketAndOutcomeStatus_Unknown",
		1: "MarketAndOutcomeStatus_Open",
		2: "MarketAndOutcomeStatus_Suspended",
		3: "MarketAndOutcomeStatus_Closed",
	}
	MarketAndOutcomeStatus_value = map[string]int32{
		"MarketAndOutcomeStatus_Unknown":   0,
		"MarketAndOutcomeStatus_Open":      1,
		"MarketAndOutcomeStatus_Suspended": 2,
		"MarketAndOutcomeStatus_Closed":    3,
	}
)

func (x MarketAndOutcomeStatus) Enum() *MarketAndOutcomeStatus {
	p := new(MarketAndOutcomeStatus)
	*p = x
	return p
}

func (x MarketAndOutcomeStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MarketAndOutcomeStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_new_api_proto_enumTypes[2].Descriptor()
}

func (MarketAndOutcomeStatus) Type() protoreflect.EnumType {
	return &file_new_api_proto_enumTypes[2]
}

func (x MarketAndOutcomeStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MarketAndOutcomeStatus.Descriptor instead.
func (MarketAndOutcomeStatus) EnumDescriptor() ([]byte, []int) {
	return file_new_api_proto_rawDescGZIP(), []int{2}
}

type OrderType int32

const (
	OrderType_OrderType_unknown     OrderType = 0
	OrderType_OrderType_Single      OrderType = 1
	OrderType_OrderType_Double      OrderType = 2
	OrderType_OrderType_Treble      OrderType = 3
	OrderType_OrderType_4folds      OrderType = 4
	OrderType_OrderType_5folds      OrderType = 5
	OrderType_OrderType_6folds      OrderType = 6
	OrderType_OrderType_7folds      OrderType = 7
	OrderType_OrderType_8folds      OrderType = 8
	OrderType_OrderType_9folds      OrderType = 9
	OrderType_OrderType_10folds     OrderType = 10
	OrderType_OrderType_Trixie      OrderType = 103
	OrderType_OrderType_Yankee      OrderType = 104
	OrderType_OrderType_SuperYankee OrderType = 105
	OrderType_OrderType_Heinz       OrderType = 106
	OrderType_OrderType_SuperHeinz  OrderType = 107
	OrderType_OrderType_Goliath     OrderType = 108
	OrderType_OrderType_Block9      OrderType = 109
	OrderType_OrderType_Block10     OrderType = 110
	OrderType_OrderType_Pantent     OrderType = 203
	OrderType_OrderType_Luck15      OrderType = 204
	OrderType_OrderType_Luck31      OrderType = 205
	OrderType_OrderType_Luck63      OrderType = 206
)

// Enum value maps for OrderType.
var (
	OrderType_name = map[int32]string{
		0:   "OrderType_unknown",
		1:   "OrderType_Single",
		2:   "OrderType_Double",
		3:   "OrderType_Treble",
		4:   "OrderType_4folds",
		5:   "OrderType_5folds",
		6:   "OrderType_6folds",
		7:   "OrderType_7folds",
		8:   "OrderType_8folds",
		9:   "OrderType_9folds",
		10:  "OrderType_10folds",
		103: "OrderType_Trixie",
		104: "OrderType_Yankee",
		105: "OrderType_SuperYankee",
		106: "OrderType_Heinz",
		107: "OrderType_SuperHeinz",
		108: "OrderType_Goliath",
		109: "OrderType_Block9",
		110: "OrderType_Block10",
		203: "OrderType_Pantent",
		204: "OrderType_Luck15",
		205: "OrderType_Luck31",
		206: "OrderType_Luck63",
	}
	OrderType_value = map[string]int32{
		"OrderType_unknown":     0,
		"OrderType_Single":      1,
		"OrderType_Double":      2,
		"OrderType_Treble":      3,
		"OrderType_4folds":      4,
		"OrderType_5folds":      5,
		"OrderType_6folds":      6,
		"OrderType_7folds":      7,
		"OrderType_8folds":      8,
		"OrderType_9folds":      9,
		"OrderType_10folds":     10,
		"OrderType_Trixie":      103,
		"OrderType_Yankee":      104,
		"OrderType_SuperYankee": 105,
		"OrderType_Heinz":       106,
		"OrderType_SuperHeinz":  107,
		"OrderType_Goliath":     108,
		"OrderType_Block9":      109,
		"OrderType_Block10":     110,
		"OrderType_Pantent":     203,
		"OrderType_Luck15":      204,
		"OrderType_Luck31":      205,
		"OrderType_Luck63":      206,
	}
)

func (x OrderType) Enum() *OrderType {
	p := new(OrderType)
	*p = x
	return p
}

func (x OrderType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OrderType) Descriptor() protoreflect.EnumDescriptor {
	return file_new_api_proto_enumTypes[3].Descriptor()
}

func (OrderType) Type() protoreflect.EnumType {
	return &file_new_api_proto_enumTypes[3]
}

func (x OrderType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OrderType.Descriptor instead.
func (OrderType) EnumDescriptor() ([]byte, []int) {
	return file_new_api_proto_rawDescGZIP(), []int{3}
}

type BetStatus int32

const (
	BetStatus_BetStatus_Unknown         BetStatus = 0
	BetStatus_BetStatus_Active          BetStatus = 1
	BetStatus_BetStatus_Won             BetStatus = 2
	BetStatus_BetStatus_HalfWon         BetStatus = 3
	BetStatus_BetStatus_Lost            BetStatus = 4
	BetStatus_BetStatus_HalfLost        BetStatus = 5
	BetStatus_BetStatus_Void            BetStatus = 6
	BetStatus_BetStatus_ErrorSuspended  BetStatus = 7
	BetStatus_BetStatus_WonDeadHeat     BetStatus = 8
	BetStatus_BetStatus_Cancelled       BetStatus = 9
	BetStatus_BetStatus_AutoSuspended   BetStatus = 10
	BetStatus_BetStatus_Fixed           BetStatus = 11
	BetStatus_BetStatus_ManualSuspended BetStatus = 12
	BetStatus_BetStatus_VoucherRevoked  BetStatus = 13
	BetStatus_BetStatus_CashOut         BetStatus = 14
)

// Enum value maps for BetStatus.
var (
	BetStatus_name = map[int32]string{
		0:  "BetStatus_Unknown",
		1:  "BetStatus_Active",
		2:  "BetStatus_Won",
		3:  "BetStatus_HalfWon",
		4:  "BetStatus_Lost",
		5:  "BetStatus_HalfLost",
		6:  "BetStatus_Void",
		7:  "BetStatus_ErrorSuspended",
		8:  "BetStatus_WonDeadHeat",
		9:  "BetStatus_Cancelled",
		10: "BetStatus_AutoSuspended",
		11: "BetStatus_Fixed",
		12: "BetStatus_ManualSuspended",
		13: "BetStatus_VoucherRevoked",
		14: "BetStatus_CashOut",
	}
	BetStatus_value = map[string]int32{
		"BetStatus_Unknown":         0,
		"BetStatus_Active":          1,
		"BetStatus_Won":             2,
		"BetStatus_HalfWon":         3,
		"BetStatus_Lost":            4,
		"BetStatus_HalfLost":        5,
		"BetStatus_Void":            6,
		"BetStatus_ErrorSuspended":  7,
		"BetStatus_WonDeadHeat":     8,
		"BetStatus_Cancelled":       9,
		"BetStatus_AutoSuspended":   10,
		"BetStatus_Fixed":           11,
		"BetStatus_ManualSuspended": 12,
		"BetStatus_VoucherRevoked":  13,
		"BetStatus_CashOut":         14,
	}
)

func (x BetStatus) Enum() *BetStatus {
	p := new(BetStatus)
	*p = x
	return p
}

func (x BetStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BetStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_new_api_proto_enumTypes[4].Descriptor()
}

func (BetStatus) Type() protoreflect.EnumType {
	return &file_new_api_proto_enumTypes[4]
}

func (x BetStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BetStatus.Descriptor instead.
func (BetStatus) EnumDescriptor() ([]byte, []int) {
	return file_new_api_proto_rawDescGZIP(), []int{4}
}

type TransactionTypeV4 int32

const (
	TransactionTypeV4_TransactionType_Auto            TransactionTypeV4 = 0
	TransactionTypeV4_TransactionType_TransferIn      TransactionTypeV4 = 1
	TransactionTypeV4_TransactionType_TransferOut     TransactionTypeV4 = 2
	TransactionTypeV4_TransactionType_Bet             TransactionTypeV4 = 3
	TransactionTypeV4_TransactionType_Settle          TransactionTypeV4 = 4
	TransactionTypeV4_TransactionType_Adjustment      TransactionTypeV4 = 5
	TransactionTypeV4_TransactionType_CashOut         TransactionTypeV4 = 6
	TransactionTypeV4_TransactionType_BetRollback     TransactionTypeV4 = 7
	TransactionTypeV4_TransactionType_SettleRollback  TransactionTypeV4 = 8
	TransactionTypeV4_TransactionType_Resettle        TransactionTypeV4 = 9
	TransactionTypeV4_TransactionType_VoucherCashBack TransactionTypeV4 = 10
	TransactionTypeV4_TransactionType_VoucherFreeBet  TransactionTypeV4 = 11
)

// Enum value maps for TransactionTypeV4.
var (
	TransactionTypeV4_name = map[int32]string{
		0:  "TransactionType_Auto",
		1:  "TransactionType_TransferIn",
		2:  "TransactionType_TransferOut",
		3:  "TransactionType_Bet",
		4:  "TransactionType_Settle",
		5:  "TransactionType_Adjustment",
		6:  "TransactionType_CashOut",
		7:  "TransactionType_BetRollback",
		8:  "TransactionType_SettleRollback",
		9:  "TransactionType_Resettle",
		10: "TransactionType_VoucherCashBack",
		11: "TransactionType_VoucherFreeBet",
	}
	TransactionTypeV4_value = map[string]int32{
		"TransactionType_Auto":            0,
		"TransactionType_TransferIn":      1,
		"TransactionType_TransferOut":     2,
		"TransactionType_Bet":             3,
		"TransactionType_Settle":          4,
		"TransactionType_Adjustment":      5,
		"TransactionType_CashOut":         6,
		"TransactionType_BetRollback":     7,
		"TransactionType_SettleRollback":  8,
		"TransactionType_Resettle":        9,
		"TransactionType_VoucherCashBack": 10,
		"TransactionType_VoucherFreeBet":  11,
	}
)

func (x TransactionTypeV4) Enum() *TransactionTypeV4 {
	p := new(TransactionTypeV4)
	*p = x
	return p
}

func (x TransactionTypeV4) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TransactionTypeV4) Descriptor() protoreflect.EnumDescriptor {
	return file_new_api_proto_enumTypes[5].Descriptor()
}

func (TransactionTypeV4) Type() protoreflect.EnumType {
	return &file_new_api_proto_enumTypes[5]
}

func (x TransactionTypeV4) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TransactionTypeV4.Descriptor instead.
func (TransactionTypeV4) EnumDescriptor() ([]byte, []int) {
	return file_new_api_proto_rawDescGZIP(), []int{5}
}

type OddsType int32

const (
	OddsType_Decimal  OddsType = 0
	OddsType_HK       OddsType = 1
	OddsType_American OddsType = 2
)

// Enum value maps for OddsType.
var (
	OddsType_name = map[int32]string{
		0: "Decimal",
		1: "HK",
		2: "American",
	}
	OddsType_value = map[string]int32{
		"Decimal":  0,
		"HK":       1,
		"American": 2,
	}
)

func (x OddsType) Enum() *OddsType {
	p := new(OddsType)
	*p = x
	return p
}

func (x OddsType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OddsType) Descriptor() protoreflect.EnumDescriptor {
	return file_new_api_proto_enumTypes[6].Descriptor()
}

func (OddsType) Type() protoreflect.EnumType {
	return &file_new_api_proto_enumTypes[6]
}

func (x OddsType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OddsType.Descriptor instead.
func (OddsType) EnumDescriptor() ([]byte, []int) {
	return file_new_api_proto_rawDescGZIP(), []int{6}
}

type SelectionStatus int32

const (
	SelectionStatus_SelectionStatus_Unknown         SelectionStatus = 0
	SelectionStatus_SelectionStatus_Active          SelectionStatus = 1
	SelectionStatus_SelectionStatus_Won             SelectionStatus = 2
	SelectionStatus_SelectionStatus_HalfWon         SelectionStatus = 3
	SelectionStatus_SelectionStatus_Lost            SelectionStatus = 4
	SelectionStatus_SelectionStatus_HalfLost        SelectionStatus = 5
	SelectionStatus_SelectionStatus_Void            SelectionStatus = 6
	SelectionStatus_SelectionStatus_ErrorSuspended  SelectionStatus = 7
	SelectionStatus_SelectionStatus_WonDeadHeat     SelectionStatus = 8
	SelectionStatus_SelectionStatus_Cancelled       SelectionStatus = 9
	SelectionStatus_SelectionStatus_AutoSuspended   SelectionStatus = 10
	SelectionStatus_SelectionStatus_ManualSuspended SelectionStatus = 12
	SelectionStatus_SelectionStatus_CashOut         SelectionStatus = 14
)

// Enum value maps for SelectionStatus.
var (
	SelectionStatus_name = map[int32]string{
		0:  "SelectionStatus_Unknown",
		1:  "SelectionStatus_Active",
		2:  "SelectionStatus_Won",
		3:  "SelectionStatus_HalfWon",
		4:  "SelectionStatus_Lost",
		5:  "SelectionStatus_HalfLost",
		6:  "SelectionStatus_Void",
		7:  "SelectionStatus_ErrorSuspended",
		8:  "SelectionStatus_WonDeadHeat",
		9:  "SelectionStatus_Cancelled",
		10: "SelectionStatus_AutoSuspended",
		12: "SelectionStatus_ManualSuspended",
		14: "SelectionStatus_CashOut",
	}
	SelectionStatus_value = map[string]int32{
		"SelectionStatus_Unknown":         0,
		"SelectionStatus_Active":          1,
		"SelectionStatus_Won":             2,
		"SelectionStatus_HalfWon":         3,
		"SelectionStatus_Lost":            4,
		"SelectionStatus_HalfLost":        5,
		"SelectionStatus_Void":            6,
		"SelectionStatus_ErrorSuspended":  7,
		"SelectionStatus_WonDeadHeat":     8,
		"SelectionStatus_Cancelled":       9,
		"SelectionStatus_AutoSuspended":   10,
		"SelectionStatus_ManualSuspended": 12,
		"SelectionStatus_CashOut":         14,
	}
)

func (x SelectionStatus) Enum() *SelectionStatus {
	p := new(SelectionStatus)
	*p = x
	return p
}

func (x SelectionStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SelectionStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_new_api_proto_enumTypes[7].Descriptor()
}

func (SelectionStatus) Type() protoreflect.EnumType {
	return &file_new_api_proto_enumTypes[7]
}

func (x SelectionStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SelectionStatus.Descriptor instead.
func (SelectionStatus) EnumDescriptor() ([]byte, []int) {
	return file_new_api_proto_rawDescGZIP(), []int{7}
}

type MarketGroupType int32

const (
	MarketGroupType_MarketGroupType_None                      MarketGroupType = 0
	MarketGroupType_MarketGroupType_FOOTBALL_HDP_OU           MarketGroupType = 1
	MarketGroupType_MarketGroupType_FOOTBALL_CORRECT_SCORE    MarketGroupType = 2
	MarketGroupType_MarketGroupType_FOOTBALL_3_WAY_HDP        MarketGroupType = 3
	MarketGroupType_MarketGroupType_FOOTBALL_HALF_FULL        MarketGroupType = 4
	MarketGroupType_MarketGroupType_FOOTBALL_ODD_EVEN         MarketGroupType = 5
	MarketGroupType_MarketGroupType_FOOTBALL_NEXT_LAST_GOAL   MarketGroupType = 6
	MarketGroupType_MarketGroupType_FOOTBALL_GOAL_RANGE       MarketGroupType = 7
	MarketGroupType_MarketGroupType_FOOTBALL_WIN_MARGIN       MarketGroupType = 8
	MarketGroupType_MarketGroupType_FOOTBALL_CORNER           MarketGroupType = 9
	MarketGroupType_MarketGroupType_FOOTBALL_OUTRIGHT         MarketGroupType = 10
	MarketGroupType_MarketGroupType_BASKETBALL_HDP_OU         MarketGroupType = 11
	MarketGroupType_MarketGroupType_BASKETBAL_WIN_MARGIN      MarketGroupType = 12
	MarketGroupType_MarketGroupType_BASKETBAL_OUTRIGHT        MarketGroupType = 13
	MarketGroupType_MarketGroupType_TENNIS_HDP_OU             MarketGroupType = 14
	MarketGroupType_MarketGroupType_TENNIS_OUTRIGHT           MarketGroupType = 15
	MarketGroupType_MarketGroupType_AMERICA_FOOTBALL_HDP_OU   MarketGroupType = 16
	MarketGroupType_MarketGroupType_AMERICA_FOOTBALL_ODD_EVEN MarketGroupType = 17
	MarketGroupType_MarketGroupType_AMERICA_FOOTBALL_OUTRIGHT MarketGroupType = 18
	MarketGroupType_MarketGroupType_ICE_HOCKEY_HDP_OU         MarketGroupType = 19
	MarketGroupType_MarketGroupType_ICE_HOCKEY_OUTRIGHT       MarketGroupType = 20
	MarketGroupType_MarketGroupType_SNOOKER_HDP_OU            MarketGroupType = 21
	MarketGroupType_MarketGroupType_SNOOKER_OUTRIGHT          MarketGroupType = 22
	MarketGroupType_MarketGroupType_TABLE_TENNIS_HDP_OU       MarketGroupType = 23
	MarketGroupType_MarketGroupType_TABLE_TENNIS_EXACT_GAMES  MarketGroupType = 24
	MarketGroupType_MarketGroupType_TABLE_TENNIS_OUTRIGHT     MarketGroupType = 25
	MarketGroupType_MarketGroupType_VOLLEYBALL_HDP_OU         MarketGroupType = 26
	MarketGroupType_MarketGroupType_VOLLEYBALL_OUTRIGHT       MarketGroupType = 27
	MarketGroupType_MarketGroupType_BADMINTON_HDP_OU          MarketGroupType = 28
	MarketGroupType_MarketGroupType_BADMINTON_EXACT_GAMES     MarketGroupType = 29
	MarketGroupType_MarketGroupType_BADMINTON_OUTRIGHT        MarketGroupType = 30
	MarketGroupType_MarketGroupType_BEACH_VOLLEY_HDP_OU       MarketGroupType = 31
	MarketGroupType_MarketGroupType_BEACH_VOLLEY_OUTRIGHT     MarketGroupType = 32
)

// Enum value maps for MarketGroupType.
var (
	MarketGroupType_name = map[int32]string{
		0:  "MarketGroupType_None",
		1:  "MarketGroupType_FOOTBALL_HDP_OU",
		2:  "MarketGroupType_FOOTBALL_CORRECT_SCORE",
		3:  "MarketGroupType_FOOTBALL_3_WAY_HDP",
		4:  "MarketGroupType_FOOTBALL_HALF_FULL",
		5:  "MarketGroupType_FOOTBALL_ODD_EVEN",
		6:  "MarketGroupType_FOOTBALL_NEXT_LAST_GOAL",
		7:  "MarketGroupType_FOOTBALL_GOAL_RANGE",
		8:  "MarketGroupType_FOOTBALL_WIN_MARGIN",
		9:  "MarketGroupType_FOOTBALL_CORNER",
		10: "MarketGroupType_FOOTBALL_OUTRIGHT",
		11: "MarketGroupType_BASKETBALL_HDP_OU",
		12: "MarketGroupType_BASKETBAL_WIN_MARGIN",
		13: "MarketGroupType_BASKETBAL_OUTRIGHT",
		14: "MarketGroupType_TENNIS_HDP_OU",
		15: "MarketGroupType_TENNIS_OUTRIGHT",
		16: "MarketGroupType_AMERICA_FOOTBALL_HDP_OU",
		17: "MarketGroupType_AMERICA_FOOTBALL_ODD_EVEN",
		18: "MarketGroupType_AMERICA_FOOTBALL_OUTRIGHT",
		19: "MarketGroupType_ICE_HOCKEY_HDP_OU",
		20: "MarketGroupType_ICE_HOCKEY_OUTRIGHT",
		21: "MarketGroupType_SNOOKER_HDP_OU",
		22: "MarketGroupType_SNOOKER_OUTRIGHT",
		23: "MarketGroupType_TABLE_TENNIS_HDP_OU",
		24: "MarketGroupType_TABLE_TENNIS_EXACT_GAMES",
		25: "MarketGroupType_TABLE_TENNIS_OUTRIGHT",
		26: "MarketGroupType_VOLLEYBALL_HDP_OU",
		27: "MarketGroupType_VOLLEYBALL_OUTRIGHT",
		28: "MarketGroupType_BADMINTON_HDP_OU",
		29: "MarketGroupType_BADMINTON_EXACT_GAMES",
		30: "MarketGroupType_BADMINTON_OUTRIGHT",
		31: "MarketGroupType_BEACH_VOLLEY_HDP_OU",
		32: "MarketGroupType_BEACH_VOLLEY_OUTRIGHT",
	}
	MarketGroupType_value = map[string]int32{
		"MarketGroupType_None":                      0,
		"MarketGroupType_FOOTBALL_HDP_OU":           1,
		"MarketGroupType_FOOTBALL_CORRECT_SCORE":    2,
		"MarketGroupType_FOOTBALL_3_WAY_HDP":        3,
		"MarketGroupType_FOOTBALL_HALF_FULL":        4,
		"MarketGroupType_FOOTBALL_ODD_EVEN":         5,
		"MarketGroupType_FOOTBALL_NEXT_LAST_GOAL":   6,
		"MarketGroupType_FOOTBALL_GOAL_RANGE":       7,
		"MarketGroupType_FOOTBALL_WIN_MARGIN":       8,
		"MarketGroupType_FOOTBALL_CORNER":           9,
		"MarketGroupType_FOOTBALL_OUTRIGHT":         10,
		"MarketGroupType_BASKETBALL_HDP_OU":         11,
		"MarketGroupType_BASKETBAL_WIN_MARGIN":      12,
		"MarketGroupType_BASKETBAL_OUTRIGHT":        13,
		"MarketGroupType_TENNIS_HDP_OU":             14,
		"MarketGroupType_TENNIS_OUTRIGHT":           15,
		"MarketGroupType_AMERICA_FOOTBALL_HDP_OU":   16,
		"MarketGroupType_AMERICA_FOOTBALL_ODD_EVEN": 17,
		"MarketGroupType_AMERICA_FOOTBALL_OUTRIGHT": 18,
		"MarketGroupType_ICE_HOCKEY_HDP_OU":         19,
		"MarketGroupType_ICE_HOCKEY_OUTRIGHT":       20,
		"MarketGroupType_SNOOKER_HDP_OU":            21,
		"MarketGroupType_SNOOKER_OUTRIGHT":          22,
		"MarketGroupType_TABLE_TENNIS_HDP_OU":       23,
		"MarketGroupType_TABLE_TENNIS_EXACT_GAMES":  24,
		"MarketGroupType_TABLE_TENNIS_OUTRIGHT":     25,
		"MarketGroupType_VOLLEYBALL_HDP_OU":         26,
		"MarketGroupType_VOLLEYBALL_OUTRIGHT":       27,
		"MarketGroupType_BADMINTON_HDP_OU":          28,
		"MarketGroupType_BADMINTON_EXACT_GAMES":     29,
		"MarketGroupType_BADMINTON_OUTRIGHT":        30,
		"MarketGroupType_BEACH_VOLLEY_HDP_OU":       31,
		"MarketGroupType_BEACH_VOLLEY_OUTRIGHT":     32,
	}
)

func (x MarketGroupType) Enum() *MarketGroupType {
	p := new(MarketGroupType)
	*p = x
	return p
}

func (x MarketGroupType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MarketGroupType) Descriptor() protoreflect.EnumDescriptor {
	return file_new_api_proto_enumTypes[8].Descriptor()
}

func (MarketGroupType) Type() protoreflect.EnumType {
	return &file_new_api_proto_enumTypes[8]
}

func (x MarketGroupType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MarketGroupType.Descriptor instead.
func (MarketGroupType) EnumDescriptor() ([]byte, []int) {
	return file_new_api_proto_rawDescGZIP(), []int{8}
}

type BoolFilter int32

const (
	BoolFilter_BoolFilter_NotFilter BoolFilter = 0
	BoolFilter_BoolFilter_FALSE     BoolFilter = 1
	BoolFilter_BoolFilter_TRUE      BoolFilter = 2
)

// Enum value maps for BoolFilter.
var (
	BoolFilter_name = map[int32]string{
		0: "BoolFilter_NotFilter",
		1: "BoolFilter_FALSE",
		2: "BoolFilter_TRUE",
	}
	BoolFilter_value = map[string]int32{
		"BoolFilter_NotFilter": 0,
		"BoolFilter_FALSE":     1,
		"BoolFilter_TRUE":      2,
	}
)

func (x BoolFilter) Enum() *BoolFilter {
	p := new(BoolFilter)
	*p = x
	return p
}

func (x BoolFilter) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BoolFilter) Descriptor() protoreflect.EnumDescriptor {
	return file_new_api_proto_enumTypes[9].Descriptor()
}

func (BoolFilter) Type() protoreflect.EnumType {
	return &file_new_api_proto_enumTypes[9]
}

func (x BoolFilter) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BoolFilter.Descriptor instead.
func (BoolFilter) EnumDescriptor() ([]byte, []int) {
	return file_new_api_proto_rawDescGZIP(), []int{9}
}

type TransactionType int32

const (
	TransactionType_Deposit                TransactionType = 0
	TransactionType_Withdrawal             TransactionType = 1
	TransactionType_Stake                  TransactionType = 2
	TransactionType_Return                 TransactionType = 3
	TransactionType_Correction             TransactionType = 4
	TransactionType_Resettle               TransactionType = 5
	TransactionType_Cashout                TransactionType = 6
	TransactionType_BetError_Adjustment    TransactionType = 7
	TransactionType_SettleError_Adjustment TransactionType = 8
)

// Enum value maps for TransactionType.
var (
	TransactionType_name = map[int32]string{
		0: "Deposit",
		1: "Withdrawal",
		2: "Stake",
		3: "Return",
		4: "Correction",
		5: "Resettle",
		6: "Cashout",
		7: "BetError_Adjustment",
		8: "SettleError_Adjustment",
	}
	TransactionType_value = map[string]int32{
		"Deposit":                0,
		"Withdrawal":             1,
		"Stake":                  2,
		"Return":                 3,
		"Correction":             4,
		"Resettle":               5,
		"Cashout":                6,
		"BetError_Adjustment":    7,
		"SettleError_Adjustment": 8,
	}
)

func (x TransactionType) Enum() *TransactionType {
	p := new(TransactionType)
	*p = x
	return p
}

func (x TransactionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TransactionType) Descriptor() protoreflect.EnumDescriptor {
	return file_new_api_proto_enumTypes[10].Descriptor()
}

func (TransactionType) Type() protoreflect.EnumType {
	return &file_new_api_proto_enumTypes[10]
}

func (x TransactionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TransactionType.Descriptor instead.
func (TransactionType) EnumDescriptor() ([]byte, []int) {
	return file_new_api_proto_rawDescGZIP(), []int{10}
}

type FilterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pager           *Pager                   `protobuf:"bytes,1,opt,name=Pager,proto3" json:"Pager,omitempty"`
	IsLive          BoolFilter               `protobuf:"varint,2,opt,name=IsLive,proto3,enum=sportBookProto.BoolFilter" json:"IsLive,omitempty"`
	MarketTypes     []uint32                 `protobuf:"varint,3,rep,packed,name=MarketTypes,proto3" json:"MarketTypes,omitempty"`
	SportIds        []uint32                 `protobuf:"varint,4,rep,packed,name=SportIds,proto3" json:"SportIds,omitempty"`
	Times           []*timestamppb.Timestamp `protobuf:"bytes,5,rep,name=Times,proto3" json:"Times,omitempty"`
	MarketGroupType MarketGroupType          `protobuf:"varint,6,opt,name=MarketGroupType,proto3,enum=sportBookProto.MarketGroupType" json:"MarketGroupType,omitempty"`
	MatchIds        []string                 `protobuf:"bytes,7,rep,name=MatchIds,proto3" json:"MatchIds,omitempty"`
	OutcomeIds      []uint64                 `protobuf:"varint,8,rep,packed,name=OutcomeIds,proto3" json:"OutcomeIds,omitempty"`
	IsOutright      BoolFilter               `protobuf:"varint,9,opt,name=IsOutright,proto3,enum=sportBookProto.BoolFilter" json:"IsOutright,omitempty"`
	Tournaments     []string                 `protobuf:"bytes,10,rep,name=Tournaments,proto3" json:"Tournaments,omitempty"`
	Seasons         []string                 `protobuf:"bytes,11,rep,name=Seasons,proto3" json:"Seasons,omitempty"`
	CategoryIds     []uint32                 `protobuf:"varint,12,rep,packed,name=CategoryIds,proto3" json:"CategoryIds,omitempty"`
}

func (x *FilterRequest) Reset() {
	*x = FilterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_new_api_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilterRequest) ProtoMessage() {}

func (x *FilterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_new_api_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilterRequest.ProtoReflect.Descriptor instead.
func (*FilterRequest) Descriptor() ([]byte, []int) {
	return file_new_api_proto_rawDescGZIP(), []int{0}
}

func (x *FilterRequest) GetPager() *Pager {
	if x != nil {
		return x.Pager
	}
	return nil
}

func (x *FilterRequest) GetIsLive() BoolFilter {
	if x != nil {
		return x.IsLive
	}
	return BoolFilter_BoolFilter_NotFilter
}

func (x *FilterRequest) GetMarketTypes() []uint32 {
	if x != nil {
		return x.MarketTypes
	}
	return nil
}

func (x *FilterRequest) GetSportIds() []uint32 {
	if x != nil {
		return x.SportIds
	}
	return nil
}

func (x *FilterRequest) GetTimes() []*timestamppb.Timestamp {
	if x != nil {
		return x.Times
	}
	return nil
}

func (x *FilterRequest) GetMarketGroupType() MarketGroupType {
	if x != nil {
		return x.MarketGroupType
	}
	return MarketGroupType_MarketGroupType_None
}

func (x *FilterRequest) GetMatchIds() []string {
	if x != nil {
		return x.MatchIds
	}
	return nil
}

func (x *FilterRequest) GetOutcomeIds() []uint64 {
	if x != nil {
		return x.OutcomeIds
	}
	return nil
}

func (x *FilterRequest) GetIsOutright() BoolFilter {
	if x != nil {
		return x.IsOutright
	}
	return BoolFilter_BoolFilter_NotFilter
}

func (x *FilterRequest) GetTournaments() []string {
	if x != nil {
		return x.Tournaments
	}
	return nil
}

func (x *FilterRequest) GetSeasons() []string {
	if x != nil {
		return x.Seasons
	}
	return nil
}

func (x *FilterRequest) GetCategoryIds() []uint32 {
	if x != nil {
		return x.CategoryIds
	}
	return nil
}

type Pager struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalRecords uint32 `protobuf:"varint,1,opt,name=TotalRecords,proto3" json:"TotalRecords,omitempty"`
	Page         uint32 `protobuf:"varint,2,opt,name=Page,proto3" json:"Page,omitempty"`
	PageSize     uint32 `protobuf:"varint,3,opt,name=PageSize,proto3" json:"PageSize,omitempty"`
}

func (x *Pager) Reset() {
	*x = Pager{}
	if protoimpl.UnsafeEnabled {
		mi := &file_new_api_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Pager) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pager) ProtoMessage() {}

func (x *Pager) ProtoReflect() protoreflect.Message {
	mi := &file_new_api_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pager.ProtoReflect.Descriptor instead.
func (*Pager) Descriptor() ([]byte, []int) {
	return file_new_api_proto_rawDescGZIP(), []int{1}
}

func (x *Pager) GetTotalRecords() uint32 {
	if x != nil {
		return x.TotalRecords
	}
	return 0
}

func (x *Pager) GetPage() uint32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *Pager) GetPageSize() uint32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type MarketsExt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          uint64   `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Cashout     uint32   `protobuf:"varint,2,opt,name=Cashout,proto3" json:"Cashout,omitempty"`
	Sort        uint32   `protobuf:"varint,3,opt,name=Sort,proto3" json:"Sort,omitempty"`
	Orientation uint32   `protobuf:"varint,4,opt,name=Orientation,proto3" json:"Orientation,omitempty"`
	ColumnNum   uint32   `protobuf:"varint,5,opt,name=ColumnNum,proto3" json:"ColumnNum,omitempty"`
	Motion      uint32   `protobuf:"varint,6,opt,name=Motion,proto3" json:"Motion,omitempty"`
	Templates   []string `protobuf:"bytes,7,rep,name=Templates,proto3" json:"Templates,omitempty"`
}

func (x *MarketsExt) Reset() {
	*x = MarketsExt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_new_api_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarketsExt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketsExt) ProtoMessage() {}

func (x *MarketsExt) ProtoReflect() protoreflect.Message {
	mi := &file_new_api_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketsExt.ProtoReflect.Descriptor instead.
func (*MarketsExt) Descriptor() ([]byte, []int) {
	return file_new_api_proto_rawDescGZIP(), []int{2}
}

func (x *MarketsExt) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *MarketsExt) GetCashout() uint32 {
	if x != nil {
		return x.Cashout
	}
	return 0
}

func (x *MarketsExt) GetSort() uint32 {
	if x != nil {
		return x.Sort
	}
	return 0
}

func (x *MarketsExt) GetOrientation() uint32 {
	if x != nil {
		return x.Orientation
	}
	return 0
}

func (x *MarketsExt) GetColumnNum() uint32 {
	if x != nil {
		return x.ColumnNum
	}
	return 0
}

func (x *MarketsExt) GetMotion() uint32 {
	if x != nil {
		return x.Motion
	}
	return 0
}

func (x *MarketsExt) GetTemplates() []string {
	if x != nil {
		return x.Templates
	}
	return nil
}

type MatchAndMarketResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Matches           []*Match               `protobuf:"bytes,1,rep,name=Matches,proto3" json:"Matches,omitempty"`
	Pager             *Pager                 `protobuf:"bytes,2,opt,name=Pager,proto3" json:"Pager,omitempty"`
	MarketExtByTypeId map[string]*MarketsExt `protobuf:"bytes,3,rep,name=MarketExtByTypeId,proto3" json:"MarketExtByTypeId,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *MatchAndMarketResponse) Reset() {
	*x = MatchAndMarketResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_new_api_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchAndMarketResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchAndMarketResponse) ProtoMessage() {}

func (x *MatchAndMarketResponse) ProtoReflect() protoreflect.Message {
	mi := &file_new_api_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchAndMarketResponse.ProtoReflect.Descriptor instead.
func (*MatchAndMarketResponse) Descriptor() ([]byte, []int) {
	return file_new_api_proto_rawDescGZIP(), []int{3}
}

func (x *MatchAndMarketResponse) GetMatches() []*Match {
	if x != nil {
		return x.Matches
	}
	return nil
}

func (x *MatchAndMarketResponse) GetPager() *Pager {
	if x != nil {
		return x.Pager
	}
	return nil
}

func (x *MatchAndMarketResponse) GetMarketExtByTypeId() map[string]*MarketsExt {
	if x != nil {
		return x.MarketExtByTypeId
	}
	return nil
}

type OutrightResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tournaments       []*Tournament          `protobuf:"bytes,1,rep,name=Tournaments,proto3" json:"Tournaments,omitempty"`
	Pager             *Pager                 `protobuf:"bytes,2,opt,name=Pager,proto3" json:"Pager,omitempty"`
	MarketExtByTypeId map[string]*MarketsExt `protobuf:"bytes,3,rep,name=MarketExtByTypeId,proto3" json:"MarketExtByTypeId,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *OutrightResponse) Reset() {
	*x = OutrightResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_new_api_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OutrightResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OutrightResponse) ProtoMessage() {}

func (x *OutrightResponse) ProtoReflect() protoreflect.Message {
	mi := &file_new_api_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OutrightResponse.ProtoReflect.Descriptor instead.
func (*OutrightResponse) Descriptor() ([]byte, []int) {
	return file_new_api_proto_rawDescGZIP(), []int{4}
}

func (x *OutrightResponse) GetTournaments() []*Tournament {
	if x != nil {
		return x.Tournaments
	}
	return nil
}

func (x *OutrightResponse) GetPager() *Pager {
	if x != nil {
		return x.Pager
	}
	return nil
}

func (x *OutrightResponse) GetMarketExtByTypeId() map[string]*MarketsExt {
	if x != nil {
		return x.MarketExtByTypeId
	}
	return nil
}

type MarketGroupResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status           ResponseStatus     `protobuf:"varint,1,opt,name=Status,proto3,enum=sportBookProto.ResponseStatus" json:"Status,omitempty"`
	MarketGroupDatas []*MarketGroupData `protobuf:"bytes,2,rep,name=MarketGroupDatas,proto3" json:"MarketGroupDatas,omitempty"`
}

func (x *MarketGroupResponse) Reset() {
	*x = MarketGroupResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_new_api_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarketGroupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketGroupResponse) ProtoMessage() {}

func (x *MarketGroupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_new_api_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketGroupResponse.ProtoReflect.Descriptor instead.
func (*MarketGroupResponse) Descriptor() ([]byte, []int) {
	return file_new_api_proto_rawDescGZIP(), []int{5}
}

func (x *MarketGroupResponse) GetStatus() ResponseStatus {
	if x != nil {
		return x.Status
	}
	return ResponseStatus_UnderMaintenanceMode
}

func (x *MarketGroupResponse) GetMarketGroupDatas() []*MarketGroupData {
	if x != nil {
		return x.MarketGroupDatas
	}
	return nil
}

type MarketGroupData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId   string   `protobuf:"bytes,1,opt,name=GroupId,proto3" json:"GroupId,omitempty"`
	MarketIds []string `protobuf:"bytes,2,rep,name=MarketIds,proto3" json:"MarketIds,omitempty"`
}

func (x *MarketGroupData) Reset() {
	*x = MarketGroupData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_new_api_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarketGroupData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketGroupData) ProtoMessage() {}

func (x *MarketGroupData) ProtoReflect() protoreflect.Message {
	mi := &file_new_api_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketGroupData.ProtoReflect.Descriptor instead.
func (*MarketGroupData) Descriptor() ([]byte, []int) {
	return file_new_api_proto_rawDescGZIP(), []int{6}
}

func (x *MarketGroupData) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *MarketGroupData) GetMarketIds() []string {
	if x != nil {
		return x.MarketIds
	}
	return nil
}

type NullString struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	String_ string `protobuf:"bytes,1,opt,name=String,proto3" json:"String,omitempty"`
	Valid   bool   `protobuf:"varint,2,opt,name=Valid,proto3" json:"Valid,omitempty"`
}

func (x *NullString) Reset() {
	*x = NullString{}
	if protoimpl.UnsafeEnabled {
		mi := &file_new_api_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NullString) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NullString) ProtoMessage() {}

func (x *NullString) ProtoReflect() protoreflect.Message {
	mi := &file_new_api_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NullString.ProtoReflect.Descriptor instead.
func (*NullString) Descriptor() ([]byte, []int) {
	return file_new_api_proto_rawDescGZIP(), []int{7}
}

func (x *NullString) GetString_() string {
	if x != nil {
		return x.String_
	}
	return ""
}

func (x *NullString) GetValid() bool {
	if x != nil {
		return x.Valid
	}
	return false
}

type Tournament struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TournamentId string `protobuf:"bytes,1,opt,name=TournamentId,proto3" json:"TournamentId,omitempty"`
	Tournament   string `protobuf:"bytes,2,opt,name=Tournament,proto3" json:"Tournament,omitempty"`
	Category     string `protobuf:"bytes,3,opt,name=Category,proto3" json:"Category,omitempty"`
	Sport        string `protobuf:"bytes,4,opt,name=Sport,proto3" json:"Sport,omitempty"`
	Season       string `protobuf:"bytes,5,opt,name=Season,proto3" json:"Season,omitempty"`
	// string Name = 2;
	Markets []*Market `protobuf:"bytes,6,rep,name=Markets,proto3" json:"Markets,omitempty"`
}

func (x *Tournament) Reset() {
	*x = Tournament{}
	if protoimpl.UnsafeEnabled {
		mi := &file_new_api_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tournament) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tournament) ProtoMessage() {}

func (x *Tournament) ProtoReflect() protoreflect.Message {
	mi := &file_new_api_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tournament.ProtoReflect.Descriptor instead.
func (*Tournament) Descriptor() ([]byte, []int) {
	return file_new_api_proto_rawDescGZIP(), []int{8}
}

func (x *Tournament) GetTournamentId() string {
	if x != nil {
		return x.TournamentId
	}
	return ""
}

func (x *Tournament) GetTournament() string {
	if x != nil {
		return x.Tournament
	}
	return ""
}

func (x *Tournament) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

func (x *Tournament) GetSport() string {
	if x != nil {
		return x.Sport
	}
	return ""
}

func (x *Tournament) GetSeason() string {
	if x != nil {
		return x.Season
	}
	return ""
}

func (x *Tournament) GetMarkets() []*Market {
	if x != nil {
		return x.Markets
	}
	return nil
}

type Category struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CategoryId  uint32        `protobuf:"varint,1,opt,name=CategoryId,proto3" json:"CategoryId,omitempty"`
	Name        string        `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	Tournaments []*Tournament `protobuf:"bytes,3,rep,name=Tournaments,proto3" json:"Tournaments,omitempty"`
}

func (x *Category) Reset() {
	*x = Category{}
	if protoimpl.UnsafeEnabled {
		mi := &file_new_api_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Category) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Category) ProtoMessage() {}

func (x *Category) ProtoReflect() protoreflect.Message {
	mi := &file_new_api_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Category.ProtoReflect.Descriptor instead.
func (*Category) Descriptor() ([]byte, []int) {
	return file_new_api_proto_rawDescGZIP(), []int{9}
}

func (x *Category) GetCategoryId() uint32 {
	if x != nil {
		return x.CategoryId
	}
	return 0
}

func (x *Category) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Category) GetTournaments() []*Tournament {
	if x != nil {
		return x.Tournaments
	}
	return nil
}

type StreamInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StreamName string `protobuf:"bytes,1,opt,name=StreamName,proto3" json:"StreamName,omitempty"`
	StreamType string `protobuf:"bytes,2,opt,name=StreamType,proto3" json:"StreamType,omitempty"`
}

func (x *StreamInfo) Reset() {
	*x = StreamInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_new_api_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamInfo) ProtoMessage() {}

func (x *StreamInfo) ProtoReflect() protoreflect.Message {
	mi := &file_new_api_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamInfo.ProtoReflect.Descriptor instead.
func (*StreamInfo) Descriptor() ([]byte, []int) {
	return file_new_api_proto_rawDescGZIP(), []int{10}
}

func (x *StreamInfo) GetStreamName() string {
	if x != nil {
		return x.StreamName
	}
	return ""
}

func (x *StreamInfo) GetStreamType() string {
	if x != nil {
		return x.StreamType
	}
	return ""
}

type Streamings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Streaming []*StreamInfo `protobuf:"bytes,1,rep,name=Streaming,proto3" json:"Streaming,omitempty"`
}

func (x *Streamings) Reset() {
	*x = Streamings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_new_api_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Streamings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Streamings) ProtoMessage() {}

func (x *Streamings) ProtoReflect() protoreflect.Message {
	mi := &file_new_api_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Streamings.ProtoReflect.Descriptor instead.
func (*Streamings) Descriptor() ([]byte, []int) {
	return file_new_api_proto_rawDescGZIP(), []int{11}
}

func (x *Streamings) GetStreaming() []*StreamInfo {
	if x != nil {
		return x.Streaming
	}
	return nil
}

type Match struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchId       string                 `protobuf:"bytes,1,opt,name=MatchId,proto3" json:"MatchId,omitempty"`
	Category      string                 `protobuf:"bytes,2,opt,name=Category,proto3" json:"Category,omitempty"`
	Tournament    string                 `protobuf:"bytes,3,opt,name=Tournament,proto3" json:"Tournament,omitempty"`
	StatusId      MatchStatus            `protobuf:"varint,4,opt,name=StatusId,proto3,enum=sportBookProto.MatchStatus" json:"StatusId,omitempty"`
	Team1Id       string                 `protobuf:"bytes,5,opt,name=Team1Id,proto3" json:"Team1Id,omitempty"`
	Team1         string                 `protobuf:"bytes,6,opt,name=Team1,proto3" json:"Team1,omitempty"`
	Team2Id       string                 `protobuf:"bytes,7,opt,name=Team2Id,proto3" json:"Team2Id,omitempty"`
	Team2         string                 `protobuf:"bytes,8,opt,name=Team2,proto3" json:"Team2,omitempty"`
	KickoffTime   *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=KickoffTime,proto3" json:"KickoffTime,omitempty"`
	TournamentId  string                 `protobuf:"bytes,10,opt,name=TournamentId,proto3" json:"TournamentId,omitempty"`
	SportId       uint32                 `protobuf:"varint,11,opt,name=SportId,proto3" json:"SportId,omitempty"`
	CategoryId    uint32                 `protobuf:"varint,12,opt,name=CategoryId,proto3" json:"CategoryId,omitempty"`
	StopBetGroups []uint32               `protobuf:"varint,13,rep,packed,name=StopBetGroups,proto3" json:"StopBetGroups,omitempty"`
	Markets       []*Market              `protobuf:"bytes,14,rep,name=Markets,proto3" json:"Markets,omitempty"`
	Infos         []*Info                `protobuf:"bytes,15,rep,name=Infos,proto3" json:"Infos,omitempty"`
	MarketCount   uint32                 `protobuf:"varint,16,opt,name=MarketCount,proto3" json:"MarketCount,omitempty"`
	Streamings    *Streamings            `protobuf:"bytes,17,opt,name=streamings,proto3" json:"streamings,omitempty"`
	MediaType     uint32                 `protobuf:"varint,18,opt,name=MediaType,proto3" json:"MediaType,omitempty"`
}

func (x *Match) Reset() {
	*x = Match{}
	if protoimpl.UnsafeEnabled {
		mi := &file_new_api_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Match) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Match) ProtoMessage() {}

func (x *Match) ProtoReflect() protoreflect.Message {
	mi := &file_new_api_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Match.ProtoReflect.Descriptor instead.
func (*Match) Descriptor() ([]byte, []int) {
	return file_new_api_proto_rawDescGZIP(), []int{12}
}

func (x *Match) GetMatchId() string {
	if x != nil {
		return x.MatchId
	}
	return ""
}

func (x *Match) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

func (x *Match) GetTournament() string {
	if x != nil {
		return x.Tournament
	}
	return ""
}

func (x *Match) GetStatusId() MatchStatus {
	if x != nil {
		return x.StatusId
	}
	return MatchStatus_MatchStatus_Ended
}

func (x *Match) GetTeam1Id() string {
	if x != nil {
		return x.Team1Id
	}
	return ""
}

func (x *Match) GetTeam1() string {
	if x != nil {
		return x.Team1
	}
	return ""
}

func (x *Match) GetTeam2Id() string {
	if x != nil {
		return x.Team2Id
	}
	return ""
}

func (x *Match) GetTeam2() string {
	if x != nil {
		return x.Team2
	}
	return ""
}

func (x *Match) GetKickoffTime() *timestamppb.Timestamp {
	if x != nil {
		return x.KickoffTime
	}
	return nil
}

func (x *Match) GetTournamentId() string {
	if x != nil {
		return x.TournamentId
	}
	return ""
}

func (x *Match) GetSportId() uint32 {
	if x != nil {
		return x.SportId
	}
	return 0
}

func (x *Match) GetCategoryId() uint32 {
	if x != nil {
		return x.CategoryId
	}
	return 0
}

func (x *Match) GetStopBetGroups() []uint32 {
	if x != nil {
		return x.StopBetGroups
	}
	return nil
}

func (x *Match) GetMarkets() []*Market {
	if x != nil {
		return x.Markets
	}
	return nil
}

func (x *Match) GetInfos() []*Info {
	if x != nil {
		return x.Infos
	}
	return nil
}

func (x *Match) GetMarketCount() uint32 {
	if x != nil {
		return x.MarketCount
	}
	return 0
}

func (x *Match) GetStreamings() *Streamings {
	if x != nil {
		return x.Streamings
	}
	return nil
}

func (x *Match) GetMediaType() uint32 {
	if x != nil {
		return x.MediaType
	}
	return 0
}

type Market struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MarketId        string                 `protobuf:"bytes,1,opt,name=MarketId,proto3" json:"MarketId,omitempty"`
	MarketTypeId    string                 `protobuf:"bytes,2,opt,name=MarketTypeId,proto3" json:"MarketTypeId,omitempty"`
	MarketType      string                 `protobuf:"bytes,3,opt,name=MarketType,proto3" json:"MarketType,omitempty"`
	Group           []uint32               `protobuf:"varint,4,rep,packed,name=Group,proto3" json:"Group,omitempty"`
	Specifier       string                 `protobuf:"bytes,5,opt,name=Specifier,proto3" json:"Specifier,omitempty"`
	ExtendSpecifier string                 `protobuf:"bytes,6,opt,name=ExtendSpecifier,proto3" json:"ExtendSpecifier,omitempty"`
	StopBetTime     *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=StopBetTime,proto3" json:"StopBetTime,omitempty"`
	Outcomes        []*Outcome             `protobuf:"bytes,8,rep,name=Outcomes,proto3" json:"Outcomes,omitempty"`
	Status          MarketAndOutcomeStatus `protobuf:"varint,9,opt,name=Status,proto3,enum=sportBookProto.MarketAndOutcomeStatus" json:"Status,omitempty"`
	VariantId       uint64                 `protobuf:"varint,10,opt,name=VariantId,proto3" json:"VariantId,omitempty"`
	Variant         string                 `protobuf:"bytes,11,opt,name=Variant,proto3" json:"Variant,omitempty"`
}

func (x *Market) Reset() {
	*x = Market{}
	if protoimpl.UnsafeEnabled {
		mi := &file_new_api_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Market) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Market) ProtoMessage() {}

func (x *Market) ProtoReflect() protoreflect.Message {
	mi := &file_new_api_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Market.ProtoReflect.Descriptor instead.
func (*Market) Descriptor() ([]byte, []int) {
	return file_new_api_proto_rawDescGZIP(), []int{13}
}

func (x *Market) GetMarketId() string {
	if x != nil {
		return x.MarketId
	}
	return ""
}

func (x *Market) GetMarketTypeId() string {
	if x != nil {
		return x.MarketTypeId
	}
	return ""
}

func (x *Market) GetMarketType() string {
	if x != nil {
		return x.MarketType
	}
	return ""
}

func (x *Market) GetGroup() []uint32 {
	if x != nil {
		return x.Group
	}
	return nil
}

func (x *Market) GetSpecifier() string {
	if x != nil {
		return x.Specifier
	}
	return ""
}

func (x *Market) GetExtendSpecifier() string {
	if x != nil {
		return x.ExtendSpecifier
	}
	return ""
}

func (x *Market) GetStopBetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StopBetTime
	}
	return nil
}

func (x *Market) GetOutcomes() []*Outcome {
	if x != nil {
		return x.Outcomes
	}
	return nil
}

func (x *Market) GetStatus() MarketAndOutcomeStatus {
	if x != nil {
		return x.Status
	}
	return MarketAndOutcomeStatus_MarketAndOutcomeStatus_Unknown
}

func (x *Market) GetVariantId() uint64 {
	if x != nil {
		return x.VariantId
	}
	return 0
}

func (x *Market) GetVariant() string {
	if x != nil {
		return x.Variant
	}
	return ""
}

type Outcome struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OutcomeId   string                 `protobuf:"bytes,1,opt,name=OutcomeId,proto3" json:"OutcomeId,omitempty"`
	Odds        string                 `protobuf:"bytes,2,opt,name=Odds,proto3" json:"Odds,omitempty"`
	Teams       []*IdNamePair          `protobuf:"bytes,3,rep,name=Teams,proto3" json:"Teams,omitempty"`
	Players     []*IdNamePair          `protobuf:"bytes,4,rep,name=Players,proto3" json:"Players,omitempty"`
	Others      []string               `protobuf:"bytes,5,rep,name=Others,proto3" json:"Others,omitempty"`
	Sort        uint32                 `protobuf:"varint,6,opt,name=Sort,proto3" json:"Sort,omitempty"`
	ColumnId    uint32                 `protobuf:"varint,7,opt,name=ColumnId,proto3" json:"ColumnId,omitempty"`
	SelectionId string                 `protobuf:"bytes,8,opt,name=SelectionId,proto3" json:"SelectionId,omitempty"`
	Selection   string                 `protobuf:"bytes,9,opt,name=Selection,proto3" json:"Selection,omitempty"`
	Status      MarketAndOutcomeStatus `protobuf:"varint,10,opt,name=Status,proto3,enum=sportBookProto.MarketAndOutcomeStatus" json:"Status,omitempty"`
}

func (x *Outcome) Reset() {
	*x = Outcome{}
	if protoimpl.UnsafeEnabled {
		mi := &file_new_api_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Outcome) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Outcome) ProtoMessage() {}

func (x *Outcome) ProtoReflect() protoreflect.Message {
	mi := &file_new_api_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Outcome.ProtoReflect.Descriptor instead.
func (*Outcome) Descriptor() ([]byte, []int) {
	return file_new_api_proto_rawDescGZIP(), []int{14}
}

func (x *Outcome) GetOutcomeId() string {
	if x != nil {
		return x.OutcomeId
	}
	return ""
}

func (x *Outcome) GetOdds() string {
	if x != nil {
		return x.Odds
	}
	return ""
}

func (x *Outcome) GetTeams() []*IdNamePair {
	if x != nil {
		return x.Teams
	}
	return nil
}

func (x *Outcome) GetPlayers() []*IdNamePair {
	if x != nil {
		return x.Players
	}
	return nil
}

func (x *Outcome) GetOthers() []string {
	if x != nil {
		return x.Others
	}
	return nil
}

func (x *Outcome) GetSort() uint32 {
	if x != nil {
		return x.Sort
	}
	return 0
}

func (x *Outcome) GetColumnId() uint32 {
	if x != nil {
		return x.ColumnId
	}
	return 0
}

func (x *Outcome) GetSelectionId() string {
	if x != nil {
		return x.SelectionId
	}
	return ""
}

func (x *Outcome) GetSelection() string {
	if x != nil {
		return x.Selection
	}
	return ""
}

func (x *Outcome) GetStatus() MarketAndOutcomeStatus {
	if x != nil {
		return x.Status
	}
	return MarketAndOutcomeStatus_MarketAndOutcomeStatus_Unknown
}

type OutcomeV4 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                uint64                 `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	MarketId          uint64                 `protobuf:"varint,2,opt,name=MarketId,proto3" json:"MarketId,omitempty"`
	SelectionId       uint64                 `protobuf:"varint,3,opt,name=SelectionId,proto3" json:"SelectionId,omitempty"`
	Player            []uint64               `protobuf:"varint,4,rep,packed,name=Player,proto3" json:"Player,omitempty"`
	Team              []uint64               `protobuf:"varint,5,rep,packed,name=Team,proto3" json:"Team,omitempty"`
	Other             []string               `protobuf:"bytes,6,rep,name=Other,proto3" json:"Other,omitempty"`
	Odds              float64                `protobuf:"fixed64,7,opt,name=Odds,proto3" json:"Odds,omitempty"`
	Probability       string                 `protobuf:"bytes,8,opt,name=Probability,proto3" json:"Probability,omitempty"`
	WinProbability    *NullString            `protobuf:"bytes,9,opt,name=WinProbability,proto3" json:"WinProbability,omitempty"`
	RefundProbability *NullString            `protobuf:"bytes,10,opt,name=RefundProbability,proto3" json:"RefundProbability,omitempty"`
	LoseProbability   *NullString            `protobuf:"bytes,11,opt,name=LoseProbability,proto3" json:"LoseProbability,omitempty"`
	Qualifier         uint32                 `protobuf:"varint,12,opt,name=Qualifier,proto3" json:"Qualifier,omitempty"`
	Status            MarketAndOutcomeStatus `protobuf:"varint,13,opt,name=Status,proto3,enum=sportBookProto.MarketAndOutcomeStatus" json:"Status,omitempty"`
	Result            int32                  `protobuf:"varint,14,opt,name=Result,proto3" json:"Result,omitempty"`
	Version           uint32                 `protobuf:"varint,15,opt,name=Version,proto3" json:"Version,omitempty"`
	CreatedAt         *timestamppb.Timestamp `protobuf:"bytes,16,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`
	UpdatedAt         *timestamppb.Timestamp `protobuf:"bytes,17,opt,name=UpdatedAt,proto3" json:"UpdatedAt,omitempty"`
}

func (x *OutcomeV4) Reset() {
	*x = OutcomeV4{}
	if protoimpl.UnsafeEnabled {
		mi := &file_new_api_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OutcomeV4) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OutcomeV4) ProtoMessage() {}

func (x *OutcomeV4) ProtoReflect() protoreflect.Message {
	mi := &file_new_api_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OutcomeV4.ProtoReflect.Descriptor instead.
func (*OutcomeV4) Descriptor() ([]byte, []int) {
	return file_new_api_proto_rawDescGZIP(), []int{15}
}

func (x *OutcomeV4) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *OutcomeV4) GetMarketId() uint64 {
	if x != nil {
		return x.MarketId
	}
	return 0
}

func (x *OutcomeV4) GetSelectionId() uint64 {
	if x != nil {
		return x.SelectionId
	}
	return 0
}

func (x *OutcomeV4) GetPlayer() []uint64 {
	if x != nil {
		return x.Player
	}
	return nil
}

func (x *OutcomeV4) GetTeam() []uint64 {
	if x != nil {
		return x.Team
	}
	return nil
}

func (x *OutcomeV4) GetOther() []string {
	if x != nil {
		return x.Other
	}
	return nil
}

func (x *OutcomeV4) GetOdds() float64 {
	if x != nil {
		return x.Odds
	}
	return 0
}

func (x *OutcomeV4) GetProbability() string {
	if x != nil {
		return x.Probability
	}
	return ""
}

func (x *OutcomeV4) GetWinProbability() *NullString {
	if x != nil {
		return x.WinProbability
	}
	return nil
}

func (x *OutcomeV4) GetRefundProbability() *NullString {
	if x != nil {
		return x.RefundProbability
	}
	return nil
}

func (x *OutcomeV4) GetLoseProbability() *NullString {
	if x != nil {
		return x.LoseProbability
	}
	return nil
}

func (x *OutcomeV4) GetQualifier() uint32 {
	if x != nil {
		return x.Qualifier
	}
	return 0
}

func (x *OutcomeV4) GetStatus() MarketAndOutcomeStatus {
	if x != nil {
		return x.Status
	}
	return MarketAndOutcomeStatus_MarketAndOutcomeStatus_Unknown
}

func (x *OutcomeV4) GetResult() int32 {
	if x != nil {
		return x.Result
	}
	return 0
}

func (x *OutcomeV4) GetVersion() uint32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *OutcomeV4) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *OutcomeV4) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

type IdNamePair struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   string `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
}

func (x *IdNamePair) Reset() {
	*x = IdNamePair{}
	if protoimpl.UnsafeEnabled {
		mi := &file_new_api_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IdNamePair) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdNamePair) ProtoMessage() {}

func (x *IdNamePair) ProtoReflect() protoreflect.Message {
	mi := &file_new_api_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdNamePair.ProtoReflect.Descriptor instead.
func (*IdNamePair) Descriptor() ([]byte, []int) {
	return file_new_api_proto_rawDescGZIP(), []int{16}
}

func (x *IdNamePair) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *IdNamePair) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type NullFloat32 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Float32 float32 `protobuf:"fixed32,1,opt,name=Float32,proto3" json:"Float32,omitempty"`
	Valid   bool    `protobuf:"varint,2,opt,name=Valid,proto3" json:"Valid,omitempty"`
}

func (x *NullFloat32) Reset() {
	*x = NullFloat32{}
	if protoimpl.UnsafeEnabled {
		mi := &file_new_api_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NullFloat32) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NullFloat32) ProtoMessage() {}

func (x *NullFloat32) ProtoReflect() protoreflect.Message {
	mi := &file_new_api_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NullFloat32.ProtoReflect.Descriptor instead.
func (*NullFloat32) Descriptor() ([]byte, []int) {
	return file_new_api_proto_rawDescGZIP(), []int{17}
}

func (x *NullFloat32) GetFloat32() float32 {
	if x != nil {
		return x.Float32
	}
	return 0
}

func (x *NullFloat32) GetValid() bool {
	if x != nil {
		return x.Valid
	}
	return false
}

type Info struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TypeId      uint32       `protobuf:"varint,1,opt,name=TypeId,proto3" json:"TypeId,omitempty"`
	MatchStatus uint32       `protobuf:"varint,2,opt,name=MatchStatus,proto3" json:"MatchStatus,omitempty"`
	Number      uint32       `protobuf:"varint,3,opt,name=Number,proto3" json:"Number,omitempty"`
	Value1      float32      `protobuf:"fixed32,4,opt,name=Value1,proto3" json:"Value1,omitempty"`
	Value2      *NullFloat32 `protobuf:"bytes,5,opt,name=Value2,proto3" json:"Value2,omitempty"`
}

func (x *Info) Reset() {
	*x = Info{}
	if protoimpl.UnsafeEnabled {
		mi := &file_new_api_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Info) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Info) ProtoMessage() {}

func (x *Info) ProtoReflect() protoreflect.Message {
	mi := &file_new_api_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Info.ProtoReflect.Descriptor instead.
func (*Info) Descriptor() ([]byte, []int) {
	return file_new_api_proto_rawDescGZIP(), []int{18}
}

func (x *Info) GetTypeId() uint32 {
	if x != nil {
		return x.TypeId
	}
	return 0
}

func (x *Info) GetMatchStatus() uint32 {
	if x != nil {
		return x.MatchStatus
	}
	return 0
}

func (x *Info) GetNumber() uint32 {
	if x != nil {
		return x.Number
	}
	return 0
}

func (x *Info) GetValue1() float32 {
	if x != nil {
		return x.Value1
	}
	return 0
}

func (x *Info) GetValue2() *NullFloat32 {
	if x != nil {
		return x.Value2
	}
	return nil
}

type Wallet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         uint64                 `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	OperatorId uint32                 `protobuf:"varint,2,opt,name=OperatorId,proto3" json:"OperatorId,omitempty"`
	PlayerId   uint64                 `protobuf:"varint,3,opt,name=PlayerId,proto3" json:"PlayerId,omitempty"`
	CurrencyId uint32                 `protobuf:"varint,4,opt,name=CurrencyId,proto3" json:"CurrencyId,omitempty"`
	BonusId    uint64                 `protobuf:"varint,5,opt,name=BonusId,proto3" json:"BonusId,omitempty"`
	Balance    float64                `protobuf:"fixed64,6,opt,name=Balance,proto3" json:"Balance,omitempty"`
	VerifyHash *NullString            `protobuf:"bytes,7,opt,name=VerifyHash,proto3" json:"VerifyHash,omitempty"`
	UpdatedAt  *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=UpdatedAt,proto3" json:"UpdatedAt,omitempty"`
	CreatedAt  *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`
}

func (x *Wallet) Reset() {
	*x = Wallet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_new_api_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Wallet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Wallet) ProtoMessage() {}

func (x *Wallet) ProtoReflect() protoreflect.Message {
	mi := &file_new_api_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Wallet.ProtoReflect.Descriptor instead.
func (*Wallet) Descriptor() ([]byte, []int) {
	return file_new_api_proto_rawDescGZIP(), []int{19}
}

func (x *Wallet) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Wallet) GetOperatorId() uint32 {
	if x != nil {
		return x.OperatorId
	}
	return 0
}

func (x *Wallet) GetPlayerId() uint64 {
	if x != nil {
		return x.PlayerId
	}
	return 0
}

func (x *Wallet) GetCurrencyId() uint32 {
	if x != nil {
		return x.CurrencyId
	}
	return 0
}

func (x *Wallet) GetBonusId() uint64 {
	if x != nil {
		return x.BonusId
	}
	return 0
}

func (x *Wallet) GetBalance() float64 {
	if x != nil {
		return x.Balance
	}
	return 0
}

func (x *Wallet) GetVerifyHash() *NullString {
	if x != nil {
		return x.VerifyHash
	}
	return nil
}

func (x *Wallet) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *Wallet) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

type BalanceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  ResponseStatus `protobuf:"varint,1,opt,name=Status,proto3,enum=sportBookProto.ResponseStatus" json:"Status,omitempty"`
	Wallets []*Wallet      `protobuf:"bytes,2,rep,name=Wallets,proto3" json:"Wallets,omitempty"`
}

func (x *BalanceResponse) Reset() {
	*x = BalanceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_new_api_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BalanceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BalanceResponse) ProtoMessage() {}

func (x *BalanceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_new_api_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BalanceResponse.ProtoReflect.Descriptor instead.
func (*BalanceResponse) Descriptor() ([]byte, []int) {
	return file_new_api_proto_rawDescGZIP(), []int{20}
}

func (x *BalanceResponse) GetStatus() ResponseStatus {
	if x != nil {
		return x.Status
	}
	return ResponseStatus_UnderMaintenanceMode
}

func (x *BalanceResponse) GetWallets() []*Wallet {
	if x != nil {
		return x.Wallets
	}
	return nil
}

type PlaceBetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AcceptOddsChange bool               `protobuf:"varint,1,opt,name=AcceptOddsChange,proto3" json:"AcceptOddsChange,omitempty"`
	Selections       []*SelectionList   `protobuf:"bytes,2,rep,name=Selections,proto3" json:"Selections,omitempty"`
	BetDetails       []*MultiLineDetail `protobuf:"bytes,3,rep,name=BetDetails,proto3" json:"BetDetails,omitempty"`
	VoucherId        string             `protobuf:"bytes,4,opt,name=voucherId,proto3" json:"voucherId,omitempty"`
	OddsType         OddsType           `protobuf:"varint,5,opt,name=OddsType,proto3,enum=sportBookProto.OddsType" json:"OddsType,omitempty"`
}

func (x *PlaceBetRequest) Reset() {
	*x = PlaceBetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_new_api_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlaceBetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlaceBetRequest) ProtoMessage() {}

func (x *PlaceBetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_new_api_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlaceBetRequest.ProtoReflect.Descriptor instead.
func (*PlaceBetRequest) Descriptor() ([]byte, []int) {
	return file_new_api_proto_rawDescGZIP(), []int{21}
}

func (x *PlaceBetRequest) GetAcceptOddsChange() bool {
	if x != nil {
		return x.AcceptOddsChange
	}
	return false
}

func (x *PlaceBetRequest) GetSelections() []*SelectionList {
	if x != nil {
		return x.Selections
	}
	return nil
}

func (x *PlaceBetRequest) GetBetDetails() []*MultiLineDetail {
	if x != nil {
		return x.BetDetails
	}
	return nil
}

func (x *PlaceBetRequest) GetVoucherId() string {
	if x != nil {
		return x.VoucherId
	}
	return ""
}

func (x *PlaceBetRequest) GetOddsType() OddsType {
	if x != nil {
		return x.OddsType
	}
	return OddsType_Decimal
}

type BetLimitResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  ResponseStatus            `protobuf:"varint,1,opt,name=Status,proto3,enum=sportBookProto.ResponseStatus" json:"Status,omitempty"`
	Message string                    `protobuf:"bytes,2,opt,name=Message,proto3" json:"Message,omitempty"`
	Limits  []*BetLimitResponse_Limit `protobuf:"bytes,3,rep,name=Limits,proto3" json:"Limits,omitempty"`
}

func (x *BetLimitResponse) Reset() {
	*x = BetLimitResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_new_api_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BetLimitResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BetLimitResponse) ProtoMessage() {}

func (x *BetLimitResponse) ProtoReflect() protoreflect.Message {
	mi := &file_new_api_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BetLimitResponse.ProtoReflect.Descriptor instead.
func (*BetLimitResponse) Descriptor() ([]byte, []int) {
	return file_new_api_proto_rawDescGZIP(), []int{22}
}

func (x *BetLimitResponse) GetStatus() ResponseStatus {
	if x != nil {
		return x.Status
	}
	return ResponseStatus_UnderMaintenanceMode
}

func (x *BetLimitResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *BetLimitResponse) GetLimits() []*BetLimitResponse_Limit {
	if x != nil {
		return x.Limits
	}
	return nil
}

type BetHistoryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartTime *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=StartTime,proto3" json:"StartTime,omitempty"`
	EndTime   *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=EndTime,proto3" json:"EndTime,omitempty"`
	Settled   bool                   `protobuf:"varint,3,opt,name=Settled,proto3" json:"Settled,omitempty"`
	Pager     *Pager                 `protobuf:"bytes,4,opt,name=Pager,proto3" json:"Pager,omitempty"`
}

func (x *BetHistoryRequest) Reset() {
	*x = BetHistoryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_new_api_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BetHistoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BetHistoryRequest) ProtoMessage() {}

func (x *BetHistoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_new_api_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BetHistoryRequest.ProtoReflect.Descriptor instead.
func (*BetHistoryRequest) Descriptor() ([]byte, []int) {
	return file_new_api_proto_rawDescGZIP(), []int{23}
}

func (x *BetHistoryRequest) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *BetHistoryRequest) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *BetHistoryRequest) GetSettled() bool {
	if x != nil {
		return x.Settled
	}
	return false
}

func (x *BetHistoryRequest) GetPager() *Pager {
	if x != nil {
		return x.Pager
	}
	return nil
}

type Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  ResponseStatus `protobuf:"varint,1,opt,name=Status,proto3,enum=sportBookProto.ResponseStatus" json:"Status,omitempty"`
	Message string         `protobuf:"bytes,2,opt,name=Message,proto3" json:"Message,omitempty"`
}

func (x *Response) Reset() {
	*x = Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_new_api_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Response) ProtoMessage() {}

func (x *Response) ProtoReflect() protoreflect.Message {
	mi := &file_new_api_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Response.ProtoReflect.Descriptor instead.
func (*Response) Descriptor() ([]byte, []int) {
	return file_new_api_proto_rawDescGZIP(), []int{24}
}

func (x *Response) GetStatus() ResponseStatus {
	if x != nil {
		return x.Status
	}
	return ResponseStatus_UnderMaintenanceMode
}

func (x *Response) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type SelectionList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OutcomeId string `protobuf:"bytes,1,opt,name=OutcomeId,proto3" json:"OutcomeId,omitempty"`
	Odds      string `protobuf:"bytes,2,opt,name=Odds,proto3" json:"Odds,omitempty"`
	MarketId  string `protobuf:"bytes,3,opt,name=MarketId,proto3" json:"MarketId,omitempty"`
}

func (x *SelectionList) Reset() {
	*x = SelectionList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_new_api_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SelectionList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SelectionList) ProtoMessage() {}

func (x *SelectionList) ProtoReflect() protoreflect.Message {
	mi := &file_new_api_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SelectionList.ProtoReflect.Descriptor instead.
func (*SelectionList) Descriptor() ([]byte, []int) {
	return file_new_api_proto_rawDescGZIP(), []int{25}
}

func (x *SelectionList) GetOutcomeId() string {
	if x != nil {
		return x.OutcomeId
	}
	return ""
}

func (x *SelectionList) GetOdds() string {
	if x != nil {
		return x.Odds
	}
	return ""
}

func (x *SelectionList) GetMarketId() string {
	if x != nil {
		return x.MarketId
	}
	return ""
}

type MultiLineDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type  OrderType `protobuf:"varint,1,opt,name=Type,proto3,enum=sportBookProto.OrderType" json:"Type,omitempty"`
	Stake float64   `protobuf:"fixed64,2,opt,name=Stake,proto3" json:"Stake,omitempty"`
}

func (x *MultiLineDetail) Reset() {
	*x = MultiLineDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_new_api_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiLineDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiLineDetail) ProtoMessage() {}

func (x *MultiLineDetail) ProtoReflect() protoreflect.Message {
	mi := &file_new_api_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiLineDetail.ProtoReflect.Descriptor instead.
func (*MultiLineDetail) Descriptor() ([]byte, []int) {
	return file_new_api_proto_rawDescGZIP(), []int{26}
}

func (x *MultiLineDetail) GetType() OrderType {
	if x != nil {
		return x.Type
	}
	return OrderType_OrderType_unknown
}

func (x *MultiLineDetail) GetStake() float64 {
	if x != nil {
		return x.Stake
	}
	return 0
}

type PlayerOrders struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status ResponseStatus `protobuf:"varint,1,opt,name=Status,proto3,enum=sportBookProto.ResponseStatus" json:"Status,omitempty"`
	Orders []*Order       `protobuf:"bytes,2,rep,name=Orders,proto3" json:"Orders,omitempty"`
	Pager  *Pager         `protobuf:"bytes,3,opt,name=Pager,proto3" json:"Pager,omitempty"`
}

func (x *PlayerOrders) Reset() {
	*x = PlayerOrders{}
	if protoimpl.UnsafeEnabled {
		mi := &file_new_api_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerOrders) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerOrders) ProtoMessage() {}

func (x *PlayerOrders) ProtoReflect() protoreflect.Message {
	mi := &file_new_api_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerOrders.ProtoReflect.Descriptor instead.
func (*PlayerOrders) Descriptor() ([]byte, []int) {
	return file_new_api_proto_rawDescGZIP(), []int{27}
}

func (x *PlayerOrders) GetStatus() ResponseStatus {
	if x != nil {
		return x.Status
	}
	return ResponseStatus_UnderMaintenanceMode
}

func (x *PlayerOrders) GetOrders() []*Order {
	if x != nil {
		return x.Orders
	}
	return nil
}

func (x *PlayerOrders) GetPager() *Pager {
	if x != nil {
		return x.Pager
	}
	return nil
}

type Order struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderId     string                 `protobuf:"bytes,1,opt,name=OrderId,proto3" json:"OrderId,omitempty"`
	OrderType   OrderType              `protobuf:"varint,2,opt,name=OrderType,proto3,enum=sportBookProto.OrderType" json:"OrderType,omitempty"`
	BetTime     *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=BetTime,proto3" json:"BetTime,omitempty"`
	SettledTime *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=SettledTime,proto3" json:"SettledTime,omitempty"`
	TotalStake  string                 `protobuf:"bytes,5,opt,name=TotalStake,proto3" json:"TotalStake,omitempty"`
	TotalReturn string                 `protobuf:"bytes,6,opt,name=TotalReturn,proto3" json:"TotalReturn,omitempty"`
	Selections  []*Selection           `protobuf:"bytes,7,rep,name=Selections,proto3" json:"Selections,omitempty"`
	Bets        []*Bet                 `protobuf:"bytes,8,rep,name=Bets,proto3" json:"Bets,omitempty"`
	OddsType    OddsType               `protobuf:"varint,9,opt,name=OddsType,proto3,enum=sportBookProto.OddsType" json:"OddsType,omitempty"`
}

func (x *Order) Reset() {
	*x = Order{}
	if protoimpl.UnsafeEnabled {
		mi := &file_new_api_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Order) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Order) ProtoMessage() {}

func (x *Order) ProtoReflect() protoreflect.Message {
	mi := &file_new_api_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Order.ProtoReflect.Descriptor instead.
func (*Order) Descriptor() ([]byte, []int) {
	return file_new_api_proto_rawDescGZIP(), []int{28}
}

func (x *Order) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

func (x *Order) GetOrderType() OrderType {
	if x != nil {
		return x.OrderType
	}
	return OrderType_OrderType_unknown
}

func (x *Order) GetBetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.BetTime
	}
	return nil
}

func (x *Order) GetSettledTime() *timestamppb.Timestamp {
	if x != nil {
		return x.SettledTime
	}
	return nil
}

func (x *Order) GetTotalStake() string {
	if x != nil {
		return x.TotalStake
	}
	return ""
}

func (x *Order) GetTotalReturn() string {
	if x != nil {
		return x.TotalReturn
	}
	return ""
}

func (x *Order) GetSelections() []*Selection {
	if x != nil {
		return x.Selections
	}
	return nil
}

func (x *Order) GetBets() []*Bet {
	if x != nil {
		return x.Bets
	}
	return nil
}

func (x *Order) GetOddsType() OddsType {
	if x != nil {
		return x.OddsType
	}
	return OddsType_Decimal
}

type Bet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BetId              string                 `protobuf:"bytes,1,opt,name=BetId,proto3" json:"BetId,omitempty"`
	SelectionPositions []uint32               `protobuf:"varint,2,rep,packed,name=SelectionPositions,proto3" json:"SelectionPositions,omitempty"`
	Odds               string                 `protobuf:"bytes,3,opt,name=Odds,proto3" json:"Odds,omitempty"`
	Stake              string                 `protobuf:"bytes,4,opt,name=Stake,proto3" json:"Stake,omitempty"`
	Return             string                 `protobuf:"bytes,5,opt,name=Return,proto3" json:"Return,omitempty"`
	Status             BetStatus              `protobuf:"varint,6,opt,name=Status,proto3,enum=sportBookProto.BetStatus" json:"Status,omitempty"`
	SettledTime        *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=SettledTime,proto3" json:"SettledTime,omitempty"`
}

func (x *Bet) Reset() {
	*x = Bet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_new_api_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bet) ProtoMessage() {}

func (x *Bet) ProtoReflect() protoreflect.Message {
	mi := &file_new_api_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bet.ProtoReflect.Descriptor instead.
func (*Bet) Descriptor() ([]byte, []int) {
	return file_new_api_proto_rawDescGZIP(), []int{29}
}

func (x *Bet) GetBetId() string {
	if x != nil {
		return x.BetId
	}
	return ""
}

func (x *Bet) GetSelectionPositions() []uint32 {
	if x != nil {
		return x.SelectionPositions
	}
	return nil
}

func (x *Bet) GetOdds() string {
	if x != nil {
		return x.Odds
	}
	return ""
}

func (x *Bet) GetStake() string {
	if x != nil {
		return x.Stake
	}
	return ""
}

func (x *Bet) GetReturn() string {
	if x != nil {
		return x.Return
	}
	return ""
}

func (x *Bet) GetStatus() BetStatus {
	if x != nil {
		return x.Status
	}
	return BetStatus_BetStatus_Unknown
}

func (x *Bet) GetSettledTime() *timestamppb.Timestamp {
	if x != nil {
		return x.SettledTime
	}
	return nil
}

type Selection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OutcomeId    string                 `protobuf:"bytes,1,opt,name=OutcomeId,proto3" json:"OutcomeId,omitempty"`
	MarketTypeId string                 `protobuf:"bytes,2,opt,name=MarketTypeId,proto3" json:"MarketTypeId,omitempty"`
	MarketType   string                 `protobuf:"bytes,3,opt,name=MarketType,proto3" json:"MarketType,omitempty"`
	SelectionId  string                 `protobuf:"bytes,4,opt,name=SelectionId,proto3" json:"SelectionId,omitempty"`
	Selection    string                 `protobuf:"bytes,5,opt,name=Selection,proto3" json:"Selection,omitempty"`
	Odds         string                 `protobuf:"bytes,6,opt,name=Odds,proto3" json:"Odds,omitempty"`
	Specifier    string                 `protobuf:"bytes,7,opt,name=Specifier,proto3" json:"Specifier,omitempty"`
	Team1        string                 `protobuf:"bytes,8,opt,name=Team1,proto3" json:"Team1,omitempty"`
	Team2        string                 `protobuf:"bytes,9,opt,name=Team2,proto3" json:"Team2,omitempty"`
	InPlay       bool                   `protobuf:"varint,10,opt,name=InPlay,proto3" json:"InPlay,omitempty"`
	Score1       string                 `protobuf:"bytes,11,opt,name=Score1,proto3" json:"Score1,omitempty"`
	Score2       string                 `protobuf:"bytes,12,opt,name=Score2,proto3" json:"Score2,omitempty"`
	KickoffTime  *timestamppb.Timestamp `protobuf:"bytes,13,opt,name=KickoffTime,proto3" json:"KickoffTime,omitempty"`
	Tournament   string                 `protobuf:"bytes,14,opt,name=Tournament,proto3" json:"Tournament,omitempty"`
	Status       SelectionStatus        `protobuf:"varint,15,opt,name=Status,proto3,enum=sportBookProto.SelectionStatus" json:"Status,omitempty"`
	IsOutright   bool                   `protobuf:"varint,16,opt,name=IsOutright,proto3" json:"IsOutright,omitempty"`
	BetMatchID   int64                  `protobuf:"varint,17,opt,name=BetMatchID,proto3" json:"BetMatchID,omitempty"`
	SportId      uint32                 `protobuf:"varint,18,opt,name=SportId,proto3" json:"SportId,omitempty"`
	Category     string                 `protobuf:"bytes,19,opt,name=Category,proto3" json:"Category,omitempty"`
}

func (x *Selection) Reset() {
	*x = Selection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_new_api_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Selection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Selection) ProtoMessage() {}

func (x *Selection) ProtoReflect() protoreflect.Message {
	mi := &file_new_api_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Selection.ProtoReflect.Descriptor instead.
func (*Selection) Descriptor() ([]byte, []int) {
	return file_new_api_proto_rawDescGZIP(), []int{30}
}

func (x *Selection) GetOutcomeId() string {
	if x != nil {
		return x.OutcomeId
	}
	return ""
}

func (x *Selection) GetMarketTypeId() string {
	if x != nil {
		return x.MarketTypeId
	}
	return ""
}

func (x *Selection) GetMarketType() string {
	if x != nil {
		return x.MarketType
	}
	return ""
}

func (x *Selection) GetSelectionId() string {
	if x != nil {
		return x.SelectionId
	}
	return ""
}

func (x *Selection) GetSelection() string {
	if x != nil {
		return x.Selection
	}
	return ""
}

func (x *Selection) GetOdds() string {
	if x != nil {
		return x.Odds
	}
	return ""
}

func (x *Selection) GetSpecifier() string {
	if x != nil {
		return x.Specifier
	}
	return ""
}

func (x *Selection) GetTeam1() string {
	if x != nil {
		return x.Team1
	}
	return ""
}

func (x *Selection) GetTeam2() string {
	if x != nil {
		return x.Team2
	}
	return ""
}

func (x *Selection) GetInPlay() bool {
	if x != nil {
		return x.InPlay
	}
	return false
}

func (x *Selection) GetScore1() string {
	if x != nil {
		return x.Score1
	}
	return ""
}

func (x *Selection) GetScore2() string {
	if x != nil {
		return x.Score2
	}
	return ""
}

func (x *Selection) GetKickoffTime() *timestamppb.Timestamp {
	if x != nil {
		return x.KickoffTime
	}
	return nil
}

func (x *Selection) GetTournament() string {
	if x != nil {
		return x.Tournament
	}
	return ""
}

func (x *Selection) GetStatus() SelectionStatus {
	if x != nil {
		return x.Status
	}
	return SelectionStatus_SelectionStatus_Unknown
}

func (x *Selection) GetIsOutright() bool {
	if x != nil {
		return x.IsOutright
	}
	return false
}

func (x *Selection) GetBetMatchID() int64 {
	if x != nil {
		return x.BetMatchID
	}
	return 0
}

func (x *Selection) GetSportId() uint32 {
	if x != nil {
		return x.SportId
	}
	return 0
}

func (x *Selection) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

type TransactionHistoryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartTime *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=StartTime,proto3" json:"StartTime,omitempty"`
	EndTime   *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=EndTime,proto3" json:"EndTime,omitempty"`
	Pager     *Pager                 `protobuf:"bytes,3,opt,name=Pager,proto3" json:"Pager,omitempty"`
}

func (x *TransactionHistoryRequest) Reset() {
	*x = TransactionHistoryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_new_api_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionHistoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionHistoryRequest) ProtoMessage() {}

func (x *TransactionHistoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_new_api_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionHistoryRequest.ProtoReflect.Descriptor instead.
func (*TransactionHistoryRequest) Descriptor() ([]byte, []int) {
	return file_new_api_proto_rawDescGZIP(), []int{31}
}

func (x *TransactionHistoryRequest) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *TransactionHistoryRequest) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *TransactionHistoryRequest) GetPager() *Pager {
	if x != nil {
		return x.Pager
	}
	return nil
}

type MarketGroupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SportID string `protobuf:"bytes,1,opt,name=SportID,proto3" json:"SportID,omitempty"`
}

func (x *MarketGroupRequest) Reset() {
	*x = MarketGroupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_new_api_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarketGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketGroupRequest) ProtoMessage() {}

func (x *MarketGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_new_api_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketGroupRequest.ProtoReflect.Descriptor instead.
func (*MarketGroupRequest) Descriptor() ([]byte, []int) {
	return file_new_api_proto_rawDescGZIP(), []int{32}
}

func (x *MarketGroupRequest) GetSportID() string {
	if x != nil {
		return x.SportID
	}
	return ""
}

type Transaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status        ResponseStatus        `protobuf:"varint,1,opt,name=Status,proto3,enum=sportBookProto.ResponseStatus" json:"Status,omitempty"`
	TotalTransfer float64               `protobuf:"fixed64,2,opt,name=TotalTransfer,proto3" json:"TotalTransfer,omitempty"`
	TotalWinLoss  float64               `protobuf:"fixed64,3,opt,name=TotalWinLoss,proto3" json:"TotalWinLoss,omitempty"`
	Historys      []*TransactionHistory `protobuf:"bytes,4,rep,name=Historys,proto3" json:"Historys,omitempty"`
	Pager         *Pager                `protobuf:"bytes,5,opt,name=Pager,proto3" json:"Pager,omitempty"`
}

func (x *Transaction) Reset() {
	*x = Transaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_new_api_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Transaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Transaction) ProtoMessage() {}

func (x *Transaction) ProtoReflect() protoreflect.Message {
	mi := &file_new_api_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Transaction.ProtoReflect.Descriptor instead.
func (*Transaction) Descriptor() ([]byte, []int) {
	return file_new_api_proto_rawDescGZIP(), []int{33}
}

func (x *Transaction) GetStatus() ResponseStatus {
	if x != nil {
		return x.Status
	}
	return ResponseStatus_UnderMaintenanceMode
}

func (x *Transaction) GetTotalTransfer() float64 {
	if x != nil {
		return x.TotalTransfer
	}
	return 0
}

func (x *Transaction) GetTotalWinLoss() float64 {
	if x != nil {
		return x.TotalWinLoss
	}
	return 0
}

func (x *Transaction) GetHistorys() []*TransactionHistory {
	if x != nil {
		return x.Historys
	}
	return nil
}

func (x *Transaction) GetPager() *Pager {
	if x != nil {
		return x.Pager
	}
	return nil
}

type TransactionHistory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID        string                 `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	TransType TransactionTypeV4      `protobuf:"varint,2,opt,name=TransType,proto3,enum=sportBookProto.TransactionTypeV4" json:"TransType,omitempty"`
	TransTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=TransTime,proto3" json:"TransTime,omitempty"`
	OrderId   string                 `protobuf:"bytes,4,opt,name=OrderId,proto3" json:"OrderId,omitempty"`
	BetNum    int32                  `protobuf:"varint,5,opt,name=BetNum,proto3" json:"BetNum,omitempty"`
	Amount    float64                `protobuf:"fixed64,6,opt,name=Amount,proto3" json:"Amount,omitempty"`
	TransId   string                 `protobuf:"bytes,7,opt,name=TransId,proto3" json:"TransId,omitempty"`
}

func (x *TransactionHistory) Reset() {
	*x = TransactionHistory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_new_api_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionHistory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionHistory) ProtoMessage() {}

func (x *TransactionHistory) ProtoReflect() protoreflect.Message {
	mi := &file_new_api_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionHistory.ProtoReflect.Descriptor instead.
func (*TransactionHistory) Descriptor() ([]byte, []int) {
	return file_new_api_proto_rawDescGZIP(), []int{34}
}

func (x *TransactionHistory) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *TransactionHistory) GetTransType() TransactionTypeV4 {
	if x != nil {
		return x.TransType
	}
	return TransactionTypeV4_TransactionType_Auto
}

func (x *TransactionHistory) GetTransTime() *timestamppb.Timestamp {
	if x != nil {
		return x.TransTime
	}
	return nil
}

func (x *TransactionHistory) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

func (x *TransactionHistory) GetBetNum() int32 {
	if x != nil {
		return x.BetNum
	}
	return 0
}

func (x *TransactionHistory) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *TransactionHistory) GetTransId() string {
	if x != nil {
		return x.TransId
	}
	return ""
}

type SportMarket struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SportId  uint32 `protobuf:"varint,1,opt,name=SportId,proto3" json:"SportId,omitempty"`
	MarketId uint64 `protobuf:"varint,2,opt,name=MarketId,proto3" json:"MarketId,omitempty"`
	Status   int32  `protobuf:"varint,3,opt,name=Status,proto3" json:"Status,omitempty"`
}

func (x *SportMarket) Reset() {
	*x = SportMarket{}
	if protoimpl.UnsafeEnabled {
		mi := &file_new_api_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SportMarket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SportMarket) ProtoMessage() {}

func (x *SportMarket) ProtoReflect() protoreflect.Message {
	mi := &file_new_api_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SportMarket.ProtoReflect.Descriptor instead.
func (*SportMarket) Descriptor() ([]byte, []int) {
	return file_new_api_proto_rawDescGZIP(), []int{35}
}

func (x *SportMarket) GetSportId() uint32 {
	if x != nil {
		return x.SportId
	}
	return 0
}

func (x *SportMarket) GetMarketId() uint64 {
	if x != nil {
		return x.MarketId
	}
	return 0
}

func (x *SportMarket) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

type Season struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           uint64                 `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	TournamentId uint64                 `protobuf:"varint,2,opt,name=TournamentId,proto3" json:"TournamentId,omitempty"`
	Name         string                 `protobuf:"bytes,3,opt,name=Name,proto3" json:"Name,omitempty"`
	Year         string                 `protobuf:"bytes,4,opt,name=Year,proto3" json:"Year,omitempty"`
	StartDate    *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=StartDate,proto3" json:"StartDate,omitempty"`
	EndDate      *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=EndDate,proto3" json:"EndDate,omitempty"`
	Live         uint32                 `protobuf:"varint,7,opt,name=Live,proto3" json:"Live,omitempty"`
}

func (x *Season) Reset() {
	*x = Season{}
	if protoimpl.UnsafeEnabled {
		mi := &file_new_api_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Season) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Season) ProtoMessage() {}

func (x *Season) ProtoReflect() protoreflect.Message {
	mi := &file_new_api_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Season.ProtoReflect.Descriptor instead.
func (*Season) Descriptor() ([]byte, []int) {
	return file_new_api_proto_rawDescGZIP(), []int{36}
}

func (x *Season) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Season) GetTournamentId() uint64 {
	if x != nil {
		return x.TournamentId
	}
	return 0
}

func (x *Season) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Season) GetYear() string {
	if x != nil {
		return x.Year
	}
	return ""
}

func (x *Season) GetStartDate() *timestamppb.Timestamp {
	if x != nil {
		return x.StartDate
	}
	return nil
}

func (x *Season) GetEndDate() *timestamppb.Timestamp {
	if x != nil {
		return x.EndDate
	}
	return nil
}

func (x *Season) GetLive() uint32 {
	if x != nil {
		return x.Live
	}
	return 0
}

type TournamentV4 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              uint64      `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Type            uint32      `protobuf:"varint,2,opt,name=Type,proto3" json:"Type,omitempty"`
	Name            string      `protobuf:"bytes,3,opt,name=Name,proto3" json:"Name,omitempty"`
	Sport           uint32      `protobuf:"varint,4,opt,name=Sport,proto3" json:"Sport,omitempty"`
	CategoryId      uint64      `protobuf:"varint,5,opt,name=CategoryId,proto3" json:"CategoryId,omitempty"`
	Status          int32       `protobuf:"varint,6,opt,name=Status,proto3" json:"Status,omitempty"`
	Logo            *NullString `protobuf:"bytes,7,opt,name=Logo,proto3" json:"Logo,omitempty"`
	CurrentSeasonId uint64      `protobuf:"varint,8,opt,name=CurrentSeasonId,proto3" json:"CurrentSeasonId,omitempty"`
}

func (x *TournamentV4) Reset() {
	*x = TournamentV4{}
	if protoimpl.UnsafeEnabled {
		mi := &file_new_api_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TournamentV4) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TournamentV4) ProtoMessage() {}

func (x *TournamentV4) ProtoReflect() protoreflect.Message {
	mi := &file_new_api_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TournamentV4.ProtoReflect.Descriptor instead.
func (*TournamentV4) Descriptor() ([]byte, []int) {
	return file_new_api_proto_rawDescGZIP(), []int{37}
}

func (x *TournamentV4) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TournamentV4) GetType() uint32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *TournamentV4) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TournamentV4) GetSport() uint32 {
	if x != nil {
		return x.Sport
	}
	return 0
}

func (x *TournamentV4) GetCategoryId() uint64 {
	if x != nil {
		return x.CategoryId
	}
	return 0
}

func (x *TournamentV4) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *TournamentV4) GetLogo() *NullString {
	if x != nil {
		return x.Logo
	}
	return nil
}

func (x *TournamentV4) GetCurrentSeasonId() uint64 {
	if x != nil {
		return x.CurrentSeasonId
	}
	return 0
}

type BetDataResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Outcomes    []*OutcomeV4    `protobuf:"bytes,1,rep,name=Outcomes,proto3" json:"Outcomes,omitempty"`
	Markets     []*Market       `protobuf:"bytes,2,rep,name=Markets,proto3" json:"Markets,omitempty"`
	Matches     []*Match        `protobuf:"bytes,3,rep,name=Matches,proto3" json:"Matches,omitempty"`
	Seasons     []*Season       `protobuf:"bytes,4,rep,name=Seasons,proto3" json:"Seasons,omitempty"`
	Tournaments []*TournamentV4 `protobuf:"bytes,5,rep,name=Tournaments,proto3" json:"Tournaments,omitempty"`
}

func (x *BetDataResponse) Reset() {
	*x = BetDataResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_new_api_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BetDataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BetDataResponse) ProtoMessage() {}

func (x *BetDataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_new_api_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BetDataResponse.ProtoReflect.Descriptor instead.
func (*BetDataResponse) Descriptor() ([]byte, []int) {
	return file_new_api_proto_rawDescGZIP(), []int{38}
}

func (x *BetDataResponse) GetOutcomes() []*OutcomeV4 {
	if x != nil {
		return x.Outcomes
	}
	return nil
}

func (x *BetDataResponse) GetMarkets() []*Market {
	if x != nil {
		return x.Markets
	}
	return nil
}

func (x *BetDataResponse) GetMatches() []*Match {
	if x != nil {
		return x.Matches
	}
	return nil
}

func (x *BetDataResponse) GetSeasons() []*Season {
	if x != nil {
		return x.Seasons
	}
	return nil
}

func (x *BetDataResponse) GetTournaments() []*TournamentV4 {
	if x != nil {
		return x.Tournaments
	}
	return nil
}

type SearchEventMatchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsLive uint32                  `protobuf:"varint,1,opt,name=isLive,proto3" json:"isLive,omitempty"`
	Result *MatchAndMarketResponse `protobuf:"bytes,2,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *SearchEventMatchResponse) Reset() {
	*x = SearchEventMatchResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_new_api_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchEventMatchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchEventMatchResponse) ProtoMessage() {}

func (x *SearchEventMatchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_new_api_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchEventMatchResponse.ProtoReflect.Descriptor instead.
func (*SearchEventMatchResponse) Descriptor() ([]byte, []int) {
	return file_new_api_proto_rawDescGZIP(), []int{39}
}

func (x *SearchEventMatchResponse) GetIsLive() uint32 {
	if x != nil {
		return x.IsLive
	}
	return 0
}

func (x *SearchEventMatchResponse) GetResult() *MatchAndMarketResponse {
	if x != nil {
		return x.Result
	}
	return nil
}

type BetSlipRefreshRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OutcomeIds []string `protobuf:"bytes,1,rep,name=OutcomeIds,proto3" json:"OutcomeIds,omitempty"`
	MarketIds  []string `protobuf:"bytes,2,rep,name=MarketIds,proto3" json:"MarketIds,omitempty"`
	Pager      *Pager   `protobuf:"bytes,3,opt,name=Pager,proto3" json:"Pager,omitempty"`
}

func (x *BetSlipRefreshRequest) Reset() {
	*x = BetSlipRefreshRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_new_api_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BetSlipRefreshRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BetSlipRefreshRequest) ProtoMessage() {}

func (x *BetSlipRefreshRequest) ProtoReflect() protoreflect.Message {
	mi := &file_new_api_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BetSlipRefreshRequest.ProtoReflect.Descriptor instead.
func (*BetSlipRefreshRequest) Descriptor() ([]byte, []int) {
	return file_new_api_proto_rawDescGZIP(), []int{40}
}

func (x *BetSlipRefreshRequest) GetOutcomeIds() []string {
	if x != nil {
		return x.OutcomeIds
	}
	return nil
}

func (x *BetSlipRefreshRequest) GetMarketIds() []string {
	if x != nil {
		return x.MarketIds
	}
	return nil
}

func (x *BetSlipRefreshRequest) GetPager() *Pager {
	if x != nil {
		return x.Pager
	}
	return nil
}

type BetSlipRefreshResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status              ResponseStatus       `protobuf:"varint,1,opt,name=Status,proto3,enum=sportBookProto.ResponseStatus" json:"Status,omitempty"`
	BetSlipDataResponse *BetSlipDataResponse `protobuf:"bytes,2,opt,name=BetSlipDataResponse,proto3" json:"BetSlipDataResponse,omitempty"`
}

func (x *BetSlipRefreshResponse) Reset() {
	*x = BetSlipRefreshResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_new_api_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BetSlipRefreshResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BetSlipRefreshResponse) ProtoMessage() {}

func (x *BetSlipRefreshResponse) ProtoReflect() protoreflect.Message {
	mi := &file_new_api_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BetSlipRefreshResponse.ProtoReflect.Descriptor instead.
func (*BetSlipRefreshResponse) Descriptor() ([]byte, []int) {
	return file_new_api_proto_rawDescGZIP(), []int{41}
}

func (x *BetSlipRefreshResponse) GetStatus() ResponseStatus {
	if x != nil {
		return x.Status
	}
	return ResponseStatus_UnderMaintenanceMode
}

func (x *BetSlipRefreshResponse) GetBetSlipDataResponse() *BetSlipDataResponse {
	if x != nil {
		return x.BetSlipDataResponse
	}
	return nil
}

type BetSlipDataResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Outcomes    []*Outcome    `protobuf:"bytes,1,rep,name=Outcomes,proto3" json:"Outcomes,omitempty"`
	Markets     []*Market     `protobuf:"bytes,2,rep,name=Markets,proto3" json:"Markets,omitempty"`
	Matches     []*Matches    `protobuf:"bytes,3,rep,name=Matches,proto3" json:"Matches,omitempty"`
	Seasons     []*Season     `protobuf:"bytes,4,rep,name=Seasons,proto3" json:"Seasons,omitempty"`
	Tournaments []*Tournament `protobuf:"bytes,5,rep,name=Tournaments,proto3" json:"Tournaments,omitempty"`
}

func (x *BetSlipDataResponse) Reset() {
	*x = BetSlipDataResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_new_api_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BetSlipDataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BetSlipDataResponse) ProtoMessage() {}

func (x *BetSlipDataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_new_api_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BetSlipDataResponse.ProtoReflect.Descriptor instead.
func (*BetSlipDataResponse) Descriptor() ([]byte, []int) {
	return file_new_api_proto_rawDescGZIP(), []int{42}
}

func (x *BetSlipDataResponse) GetOutcomes() []*Outcome {
	if x != nil {
		return x.Outcomes
	}
	return nil
}

func (x *BetSlipDataResponse) GetMarkets() []*Market {
	if x != nil {
		return x.Markets
	}
	return nil
}

func (x *BetSlipDataResponse) GetMatches() []*Matches {
	if x != nil {
		return x.Matches
	}
	return nil
}

func (x *BetSlipDataResponse) GetSeasons() []*Season {
	if x != nil {
		return x.Seasons
	}
	return nil
}

func (x *BetSlipDataResponse) GetTournaments() []*Tournament {
	if x != nil {
		return x.Tournaments
	}
	return nil
}

type Matches struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Match       *Match `protobuf:"bytes,1,opt,name=Match,proto3" json:"Match,omitempty"`
	MarketCount int32  `protobuf:"varint,2,opt,name=MarketCount,proto3" json:"MarketCount,omitempty"`
}

func (x *Matches) Reset() {
	*x = Matches{}
	if protoimpl.UnsafeEnabled {
		mi := &file_new_api_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Matches) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Matches) ProtoMessage() {}

func (x *Matches) ProtoReflect() protoreflect.Message {
	mi := &file_new_api_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Matches.ProtoReflect.Descriptor instead.
func (*Matches) Descriptor() ([]byte, []int) {
	return file_new_api_proto_rawDescGZIP(), []int{43}
}

func (x *Matches) GetMatch() *Match {
	if x != nil {
		return x.Match
	}
	return nil
}

func (x *Matches) GetMarketCount() int32 {
	if x != nil {
		return x.MarketCount
	}
	return 0
}

type BetLimitResponse_Limit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Stake  float64 `protobuf:"fixed64,1,opt,name=Stake,proto3" json:"Stake,omitempty"`
	Return float64 `protobuf:"fixed64,2,opt,name=Return,proto3" json:"Return,omitempty"`
}

func (x *BetLimitResponse_Limit) Reset() {
	*x = BetLimitResponse_Limit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_new_api_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BetLimitResponse_Limit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BetLimitResponse_Limit) ProtoMessage() {}

func (x *BetLimitResponse_Limit) ProtoReflect() protoreflect.Message {
	mi := &file_new_api_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BetLimitResponse_Limit.ProtoReflect.Descriptor instead.
func (*BetLimitResponse_Limit) Descriptor() ([]byte, []int) {
	return file_new_api_proto_rawDescGZIP(), []int{22, 0}
}

func (x *BetLimitResponse_Limit) GetStake() float64 {
	if x != nil {
		return x.Stake
	}
	return 0
}

func (x *BetLimitResponse_Limit) GetReturn() float64 {
	if x != nil {
		return x.Return
	}
	return 0
}

var File_new_api_proto protoreflect.FileDescriptor

var file_new_api_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x6e, 0x65, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x0e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x6f, 0x6f, 0x6b, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x0f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0x81, 0x04, 0x0a, 0x0d, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x2b, 0x0a, 0x05, 0x50, 0x61, 0x67, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x6f, 0x6f, 0x6b, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x72, 0x52, 0x05, 0x50, 0x61, 0x67, 0x65, 0x72, 0x12,
	0x32, 0x0a, 0x06, 0x49, 0x73, 0x4c, 0x69, 0x76, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1a, 0x2e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x6f, 0x6f, 0x6b, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x49, 0x73, 0x4c,
	0x69, 0x76, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0b, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x64,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x08, 0x53, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x64,
	0x73, 0x12, 0x30, 0x0a, 0x05, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x05, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x12, 0x49, 0x0a, 0x0f, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x73,
	0x70, 0x6f, 0x72, 0x74, 0x42, 0x6f, 0x6f, 0x6b, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0f, 0x4d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x08, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x4f, 0x75,
	0x74, 0x63, 0x6f, 0x6d, 0x65, 0x49, 0x64, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x04, 0x52, 0x0a,
	0x4f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x49, 0x64, 0x73, 0x12, 0x3a, 0x0a, 0x0a, 0x49, 0x73,
	0x4f, 0x75, 0x74, 0x72, 0x69, 0x67, 0x68, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a,
	0x2e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x6f, 0x6f, 0x6b, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x42, 0x6f, 0x6f, 0x6c, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x0a, 0x49, 0x73, 0x4f, 0x75,
	0x74, 0x72, 0x69, 0x67, 0x68, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x54, 0x6f, 0x75,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x53, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64,
	0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0b, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x49, 0x64, 0x73, 0x22, 0x5b, 0x0a, 0x05, 0x50, 0x61, 0x67, 0x65, 0x72, 0x12, 0x22, 0x0a,
	0x0c, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0c, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x73, 0x12, 0x12, 0x0a, 0x04, 0x50, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x04, 0x50, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x50, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a,
	0x65, 0x22, 0xc0, 0x01, 0x0a, 0x0a, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x73, 0x45, 0x78, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x49, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x43, 0x61, 0x73, 0x68, 0x6f, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x07, 0x43, 0x61, 0x73, 0x68, 0x6f, 0x75, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x53, 0x6f,
	0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x53, 0x6f, 0x72, 0x74, 0x12, 0x20,
	0x0a, 0x0b, 0x4f, 0x72, 0x69, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0b, 0x4f, 0x72, 0x69, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x1c, 0x0a, 0x09, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4e, 0x75, 0x6d, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4e, 0x75, 0x6d, 0x12, 0x16,
	0x0a, 0x06, 0x4d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06,
	0x4d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x73, 0x22, 0xc5, 0x02, 0x0a, 0x16, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x41, 0x6e,
	0x64, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x2f, 0x0a, 0x07, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x6f, 0x6f, 0x6b, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x07, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73,
	0x12, 0x2b, 0x0a, 0x05, 0x50, 0x61, 0x67, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x6f, 0x6f, 0x6b, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x50, 0x61, 0x67, 0x65, 0x72, 0x52, 0x05, 0x50, 0x61, 0x67, 0x65, 0x72, 0x12, 0x6b, 0x0a,
	0x11, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x45, 0x78, 0x74, 0x42, 0x79, 0x54, 0x79, 0x70, 0x65,
	0x49, 0x64, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x73, 0x70, 0x6f, 0x72, 0x74,
	0x42, 0x6f, 0x6f, 0x6b, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x41,
	0x6e, 0x64, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x45, 0x78, 0x74, 0x42, 0x79, 0x54, 0x79, 0x70, 0x65,
	0x49, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x11, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x45,
	0x78, 0x74, 0x42, 0x79, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x1a, 0x60, 0x0a, 0x16, 0x4d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x45, 0x78, 0x74, 0x42, 0x79, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x30, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x6f, 0x6f,
	0x6b, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x73, 0x45, 0x78,
	0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xc6, 0x02, 0x0a,
	0x10, 0x4f, 0x75, 0x74, 0x72, 0x69, 0x67, 0x68, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x3c, 0x0a, 0x0b, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x6f,
	0x6f, 0x6b, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x0b, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12,
	0x2b, 0x0a, 0x05, 0x50, 0x61, 0x67, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x6f, 0x6f, 0x6b, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x50, 0x61, 0x67, 0x65, 0x72, 0x52, 0x05, 0x50, 0x61, 0x67, 0x65, 0x72, 0x12, 0x65, 0x0a, 0x11,
	0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x45, 0x78, 0x74, 0x42, 0x79, 0x54, 0x79, 0x70, 0x65, 0x49,
	0x64, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x42,
	0x6f, 0x6f, 0x6b, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x75, 0x74, 0x72, 0x69, 0x67, 0x68,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x45, 0x78, 0x74, 0x42, 0x79, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x11, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x45, 0x78, 0x74, 0x42, 0x79, 0x54, 0x79, 0x70,
	0x65, 0x49, 0x64, 0x1a, 0x60, 0x0a, 0x16, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x45, 0x78, 0x74,
	0x42, 0x79, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x30, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x6f, 0x6f, 0x6b, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x73, 0x45, 0x78, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x9a, 0x01, 0x0a, 0x13, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a,
	0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e,
	0x73, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x6f, 0x6f, 0x6b, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x4b, 0x0a, 0x10, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x44, 0x61, 0x74, 0x61, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x6f, 0x6f, 0x6b, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x10, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x44, 0x61, 0x74,
	0x61, 0x73, 0x22, 0x49, 0x0a, 0x0f, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x44, 0x61, 0x74, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12,
	0x1c, 0x0a, 0x09, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x09, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x73, 0x22, 0x3a, 0x0a,
	0x0a, 0x4e, 0x75, 0x6c, 0x6c, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x05, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x22, 0xcc, 0x01, 0x0a, 0x0a, 0x54, 0x6f,
	0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x54, 0x6f, 0x75, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a,
	0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x70, 0x6f, 0x72,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x53, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x07, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x42,
	0x6f, 0x6f, 0x6b, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x52,
	0x07, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x73, 0x22, 0x7c, 0x0a, 0x08, 0x43, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3c, 0x0a, 0x0b, 0x54, 0x6f, 0x75, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x73, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x6f, 0x6f, 0x6b, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54,
	0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0b, 0x54, 0x6f, 0x75, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x4c, 0x0a, 0x0a, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x54, 0x79, 0x70, 0x65, 0x22, 0x46, 0x0a, 0x0a, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e,
	0x67, 0x73, 0x12, 0x38, 0x0a, 0x09, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x6f, 0x6f,
	0x6b, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x09, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x22, 0x92, 0x05, 0x0a,
	0x05, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x1e, 0x0a, 0x0a,
	0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x37, 0x0a, 0x08,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b,
	0x2e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x6f, 0x6f, 0x6b, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x08, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x54, 0x65, 0x61, 0x6d, 0x31, 0x49, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x54, 0x65, 0x61, 0x6d, 0x31, 0x49, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x54, 0x65, 0x61, 0x6d, 0x31, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x54, 0x65, 0x61, 0x6d, 0x31, 0x12, 0x18, 0x0a, 0x07, 0x54, 0x65, 0x61, 0x6d, 0x32, 0x49, 0x64,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x54, 0x65, 0x61, 0x6d, 0x32, 0x49, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x54, 0x65, 0x61, 0x6d, 0x32, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x54, 0x65, 0x61, 0x6d, 0x32, 0x12, 0x3c, 0x0a, 0x0b, 0x4b, 0x69, 0x63, 0x6b, 0x6f, 0x66, 0x66,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x4b, 0x69, 0x63, 0x6b, 0x6f, 0x66, 0x66, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x54, 0x6f, 0x75, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x70, 0x6f, 0x72, 0x74,
	0x49, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x53, 0x70, 0x6f, 0x72, 0x74, 0x49,
	0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49,
	0x64, 0x12, 0x24, 0x0a, 0x0d, 0x53, 0x74, 0x6f, 0x70, 0x42, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0d, 0x53, 0x74, 0x6f, 0x70, 0x42, 0x65,
	0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x30, 0x0a, 0x07, 0x4d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x70, 0x6f, 0x72, 0x74,
	0x42, 0x6f, 0x6f, 0x6b, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x52, 0x07, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x2a, 0x0a, 0x05, 0x49, 0x6e, 0x66,
	0x6f, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x70, 0x6f, 0x72, 0x74,
	0x42, 0x6f, 0x6f, 0x6b, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05,
	0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x4d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3a, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x70,
	0x6f, 0x72, 0x74, 0x42, 0x6f, 0x6f, 0x6b, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x0a, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69,
	0x6e, 0x67, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x79, 0x70,
	0x65, 0x22, 0xb1, 0x03, 0x0a, 0x06, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x4d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a,
	0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x05, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x12, 0x28, 0x0a, 0x0f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x64, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x3c, 0x0a, 0x0b, 0x53, 0x74,
	0x6f, 0x70, 0x42, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x53, 0x74, 0x6f,
	0x70, 0x42, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x08, 0x4f, 0x75, 0x74, 0x63,
	0x6f, 0x6d, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x70, 0x6f,
	0x72, 0x74, 0x42, 0x6f, 0x6f, 0x6b, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x75, 0x74, 0x63,
	0x6f, 0x6d, 0x65, 0x52, 0x08, 0x4f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x73, 0x12, 0x3e, 0x0a,
	0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e,
	0x73, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x6f, 0x6f, 0x6b, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x41, 0x6e, 0x64, 0x4f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1c, 0x0a,
	0x09, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x09, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x56,
	0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x56, 0x61,
	0x72, 0x69, 0x61, 0x6e, 0x74, 0x22, 0xeb, 0x02, 0x0a, 0x07, 0x4f, 0x75, 0x74, 0x63, 0x6f, 0x6d,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x4f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x4f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x49, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x4f, 0x64, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4f,
	0x64, 0x64, 0x73, 0x12, 0x30, 0x0a, 0x05, 0x54, 0x65, 0x61, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x6f, 0x6f, 0x6b, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x50, 0x61, 0x69, 0x72, 0x52, 0x05,
	0x54, 0x65, 0x61, 0x6d, 0x73, 0x12, 0x34, 0x0a, 0x07, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x6f,
	0x6f, 0x6b, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x50, 0x61,
	0x69, 0x72, 0x52, 0x07, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x4f,
	0x74, 0x68, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x4f, 0x74, 0x68,
	0x65, 0x72, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x53, 0x6f, 0x72, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x04, 0x53, 0x6f, 0x72, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x43, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x3e, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x6f, 0x6f, 0x6b, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x41, 0x6e, 0x64, 0x4f, 0x75,
	0x74, 0x63, 0x6f, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x22, 0xa9, 0x05, 0x0a, 0x09, 0x4f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x56,
	0x34, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x49,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x08, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x12, 0x20, 0x0a,
	0x0b, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0b, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x18, 0x04, 0x20, 0x03, 0x28, 0x04, 0x52,
	0x06, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x65, 0x61, 0x6d, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x04, 0x52, 0x04, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x4f,
	0x74, 0x68, 0x65, 0x72, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x4f, 0x74, 0x68, 0x65,
	0x72, 0x12, 0x12, 0x0a, 0x04, 0x4f, 0x64, 0x64, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x04, 0x4f, 0x64, 0x64, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x50, 0x72, 0x6f, 0x62,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x42, 0x0a, 0x0e, 0x57, 0x69, 0x6e, 0x50, 0x72,
	0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x6f, 0x6f, 0x6b, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0e, 0x57, 0x69, 0x6e,
	0x50, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x48, 0x0a, 0x11, 0x52,
	0x65, 0x66, 0x75, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x6f,
	0x6f, 0x6b, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x52, 0x11, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x62, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x44, 0x0a, 0x0f, 0x4c, 0x6f, 0x73, 0x65, 0x50, 0x72, 0x6f,
	0x62, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x6f, 0x6f, 0x6b, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x4e, 0x75, 0x6c, 0x6c, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0f, 0x4c, 0x6f, 0x73, 0x65,
	0x50, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x51,
	0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x51, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x3e, 0x0a, 0x06, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x73, 0x70, 0x6f, 0x72,
	0x74, 0x42, 0x6f, 0x6f, 0x6b, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x41, 0x6e, 0x64, 0x4f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x09, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22,
	0x30, 0x0a, 0x0a, 0x49, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x50, 0x61, 0x69, 0x72, 0x12, 0x0e, 0x0a,
	0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d,
	0x65, 0x22, 0x3d, 0x0a, 0x0b, 0x4e, 0x75, 0x6c, 0x6c, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x32,
	0x12, 0x18, 0x0a, 0x07, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x32, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x07, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x32, 0x12, 0x14, 0x0a, 0x05, 0x56, 0x61,
	0x6c, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x56, 0x61, 0x6c, 0x69, 0x64,
	0x22, 0xa5, 0x01, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x54, 0x79, 0x70,
	0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x54, 0x79, 0x70, 0x65, 0x49,
	0x64, 0x12, 0x20, 0x0a, 0x0b, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x06, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x31, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x31, 0x12, 0x33, 0x0a, 0x06, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x32, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x6f, 0x6f, 0x6b, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x32,
	0x52, 0x06, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x32, 0x22, 0xd8, 0x02, 0x0a, 0x06, 0x57, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x02, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x1e, 0x0a, 0x0a, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0a, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x07, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x42, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x42, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x12, 0x3a, 0x0a, 0x0a, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x48, 0x61, 0x73,
	0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x42,
	0x6f, 0x6f, 0x6b, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x52, 0x0a, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x48, 0x61, 0x73, 0x68, 0x12,
	0x38, 0x0a, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x22, 0x7b, 0x0a, 0x0f, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x6f,
	0x6f, 0x6b, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x30,
	0x0a, 0x07, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x6f, 0x6f, 0x6b, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x52, 0x07, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73,
	0x22, 0x91, 0x02, 0x0a, 0x0f, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x42, 0x65, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x4f, 0x64,
	0x64, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10,
	0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x4f, 0x64, 0x64, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x12, 0x3d, 0x0a, 0x0a, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x6f, 0x6f, 0x6b,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x0a, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x3f, 0x0a, 0x0a, 0x42, 0x65, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x6f, 0x6f, 0x6b, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x4c, 0x69, 0x6e, 0x65, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x52, 0x0a, 0x42, 0x65, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x12, 0x1c, 0x0a, 0x09, 0x76, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x49, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x76, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x49, 0x64, 0x12, 0x34,
	0x0a, 0x08, 0x4f, 0x64, 0x64, 0x73, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x18, 0x2e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x6f, 0x6f, 0x6b, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x4f, 0x64, 0x64, 0x73, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x4f, 0x64, 0x64, 0x73,
	0x54, 0x79, 0x70, 0x65, 0x22, 0xdb, 0x01, 0x0a, 0x10, 0x42, 0x65, 0x74, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x06, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x73, 0x70, 0x6f, 0x72,
	0x74, 0x42, 0x6f, 0x6f, 0x6b, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x3e, 0x0a, 0x06, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x73, 0x70,
	0x6f, 0x72, 0x74, 0x42, 0x6f, 0x6f, 0x6b, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x65, 0x74,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x52, 0x06, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x1a, 0x35, 0x0a, 0x05, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x05, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x52, 0x65,
	0x74, 0x75, 0x72, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x52, 0x65, 0x74, 0x75,
	0x72, 0x6e, 0x22, 0xca, 0x01, 0x0a, 0x11, 0x42, 0x65, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x34, 0x0a, 0x07, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x07, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x65, 0x74, 0x74,
	0x6c, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x53, 0x65, 0x74, 0x74, 0x6c,
	0x65, 0x64, 0x12, 0x2b, 0x0a, 0x05, 0x50, 0x61, 0x67, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x6f, 0x6f, 0x6b, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x72, 0x52, 0x05, 0x50, 0x61, 0x67, 0x65, 0x72, 0x22,
	0x5c, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x06, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x73, 0x70,
	0x6f, 0x72, 0x74, 0x42, 0x6f, 0x6f, 0x6b, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x5d, 0x0a,
	0x0d, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1c,
	0x0a, 0x09, 0x4f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x4f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x4f, 0x64, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4f, 0x64, 0x64, 0x73,
	0x12, 0x1a, 0x0a, 0x08, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x22, 0x56, 0x0a, 0x0f,
	0x4d, 0x75, 0x6c, 0x74, 0x69, 0x4c, 0x69, 0x6e, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12,
	0x2d, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e,
	0x73, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x6f, 0x6f, 0x6b, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x53,
	0x74, 0x61, 0x6b, 0x65, 0x22, 0xa2, 0x01, 0x0a, 0x0c, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x73, 0x12, 0x36, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x6f, 0x6f,
	0x6b, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2d, 0x0a,
	0x06, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x73, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x6f, 0x6f, 0x6b, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x52, 0x06, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x12, 0x2b, 0x0a, 0x05,
	0x50, 0x61, 0x67, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x70,
	0x6f, 0x72, 0x74, 0x42, 0x6f, 0x6f, 0x6b, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x61, 0x67,
	0x65, 0x72, 0x52, 0x05, 0x50, 0x61, 0x67, 0x65, 0x72, 0x22, 0xaa, 0x03, 0x0a, 0x05, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x37, 0x0a,
	0x09, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x19, 0x2e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x6f, 0x6f, 0x6b, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x34, 0x0a, 0x07, 0x42, 0x65, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x07, 0x42, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3c, 0x0a, 0x0b,
	0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x53,
	0x65, 0x74, 0x74, 0x6c, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x6f,
	0x74, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x54, 0x6f,
	0x74, 0x61, 0x6c, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x12, 0x39, 0x0a, 0x0a,
	0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x6f, 0x6f, 0x6b, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x53, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x27, 0x0a, 0x04, 0x42, 0x65, 0x74, 0x73, 0x18,
	0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x6f, 0x6f,
	0x6b, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x65, 0x74, 0x52, 0x04, 0x42, 0x65, 0x74, 0x73,
	0x12, 0x34, 0x0a, 0x08, 0x4f, 0x64, 0x64, 0x73, 0x54, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x18, 0x2e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x6f, 0x6f, 0x6b, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x64, 0x64, 0x73, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x4f, 0x64,
	0x64, 0x73, 0x54, 0x79, 0x70, 0x65, 0x22, 0xfe, 0x01, 0x0a, 0x03, 0x42, 0x65, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x42, 0x65, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x42,
	0x65, 0x74, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x12, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d,
	0x52, 0x12, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x4f, 0x64, 0x64, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x4f, 0x64, 0x64, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x6b,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x12, 0x31, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x6f,
	0x6f, 0x6b, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3c, 0x0a, 0x0b, 0x53, 0x65, 0x74,
	0x74, 0x6c, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x53, 0x65, 0x74, 0x74,
	0x6c, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xe0, 0x04, 0x0a, 0x09, 0x53, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x4f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x4f, 0x75, 0x74, 0x63, 0x6f, 0x6d,
	0x65, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x4d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x4d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x4d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x53, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x53, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x53, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x4f, 0x64, 0x64, 0x73, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4f, 0x64, 0x64, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x53,
	0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x65, 0x61,
	0x6d, 0x31, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x65, 0x61, 0x6d, 0x31, 0x12,
	0x14, 0x0a, 0x05, 0x54, 0x65, 0x61, 0x6d, 0x32, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x54, 0x65, 0x61, 0x6d, 0x32, 0x12, 0x16, 0x0a, 0x06, 0x49, 0x6e, 0x50, 0x6c, 0x61, 0x79, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x49, 0x6e, 0x50, 0x6c, 0x61, 0x79, 0x12, 0x16, 0x0a,
	0x06, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x31, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x31, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x32, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x32, 0x12, 0x3c, 0x0a,
	0x0b, 0x4b, 0x69, 0x63, 0x6b, 0x6f, 0x66, 0x66, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b,
	0x4b, 0x69, 0x63, 0x6b, 0x6f, 0x66, 0x66, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x54,
	0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x37, 0x0a, 0x06, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x73, 0x70,
	0x6f, 0x72, 0x74, 0x42, 0x6f, 0x6f, 0x6b, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x73, 0x4f, 0x75, 0x74, 0x72, 0x69, 0x67,
	0x68, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x49, 0x73, 0x4f, 0x75, 0x74, 0x72,
	0x69, 0x67, 0x68, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x42, 0x65, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x49, 0x44, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x42, 0x65, 0x74, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x53, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x22, 0xb8, 0x01, 0x0a, 0x19, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x34, 0x0a, 0x07, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x07, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x05, 0x50, 0x61, 0x67, 0x65,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x42,
	0x6f, 0x6f, 0x6b, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x72, 0x52, 0x05,
	0x50, 0x61, 0x67, 0x65, 0x72, 0x22, 0x2e, 0x0a, 0x12, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x53,
	0x70, 0x6f, 0x72, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x53, 0x70,
	0x6f, 0x72, 0x74, 0x49, 0x44, 0x22, 0xfc, 0x01, 0x0a, 0x0b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x6f, 0x6f,
	0x6b, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x24, 0x0a,
	0x0d, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x57, 0x69, 0x6e, 0x4c,
	0x6f, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x57, 0x69, 0x6e, 0x4c, 0x6f, 0x73, 0x73, 0x12, 0x3e, 0x0a, 0x08, 0x48, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x79, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x73, 0x70, 0x6f, 0x72,
	0x74, 0x42, 0x6f, 0x6f, 0x6b, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x08, 0x48,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x73, 0x12, 0x2b, 0x0a, 0x05, 0x50, 0x61, 0x67, 0x65, 0x72,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x6f,
	0x6f, 0x6b, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x72, 0x52, 0x05, 0x50,
	0x61, 0x67, 0x65, 0x72, 0x22, 0x83, 0x02, 0x0a, 0x12, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x3f, 0x0a, 0x09, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21,
	0x2e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x6f, 0x6f, 0x6b, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x56,
	0x34, 0x52, 0x09, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x38, 0x0a, 0x09,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x42, 0x65, 0x74, 0x4e, 0x75, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x42, 0x65, 0x74, 0x4e, 0x75, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x18, 0x0a, 0x07, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x49, 0x64, 0x22, 0x5b, 0x0a, 0x0b, 0x53, 0x70,
	0x6f, 0x72, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x70, 0x6f,
	0x72, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x53, 0x70, 0x6f, 0x72,
	0x74, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xe8, 0x01, 0x0a, 0x06, 0x53, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02,
	0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x59, 0x65,
	0x61, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x59, 0x65, 0x61, 0x72, 0x12, 0x38,
	0x0a, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x34, 0x0a, 0x07, 0x45, 0x6e, 0x64, 0x44,
	0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x45, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x4c, 0x69, 0x76, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x4c, 0x69,
	0x76, 0x65, 0x22, 0xee, 0x01, 0x0a, 0x0c, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e,
	0x74, 0x56, 0x34, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x02, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x53,
	0x70, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x53, 0x70, 0x6f, 0x72,
	0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2e, 0x0a, 0x04, 0x4c, 0x6f, 0x67,
	0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x42,
	0x6f, 0x6f, 0x6b, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x52, 0x04, 0x4c, 0x6f, 0x67, 0x6f, 0x12, 0x28, 0x0a, 0x0f, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0f, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x49, 0x64, 0x22, 0x9d, 0x02, 0x0a, 0x0f, 0x42, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x4f, 0x75, 0x74, 0x63, 0x6f,
	0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x70, 0x6f, 0x72,
	0x74, 0x42, 0x6f, 0x6f, 0x6b, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x75, 0x74, 0x63, 0x6f,
	0x6d, 0x65, 0x56, 0x34, 0x52, 0x08, 0x4f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x73, 0x12, 0x30,
	0x0a, 0x07, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x6f, 0x6f, 0x6b, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x52, 0x07, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x73,
	0x12, 0x2f, 0x0a, 0x07, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x6f, 0x6f, 0x6b, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x07, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65,
	0x73, 0x12, 0x30, 0x0a, 0x07, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x6f, 0x6f, 0x6b, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x07, 0x53, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x73, 0x12, 0x3e, 0x0a, 0x0b, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x70, 0x6f, 0x72, 0x74,
	0x42, 0x6f, 0x6f, 0x6b, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x6e, 0x74, 0x56, 0x34, 0x52, 0x0b, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x22, 0x72, 0x0a, 0x18, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x69, 0x73, 0x4c, 0x69, 0x76, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x06, 0x69, 0x73, 0x4c, 0x69, 0x76, 0x65, 0x12, 0x3e, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x42,
	0x6f, 0x6f, 0x6b, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x41, 0x6e,
	0x64, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x82, 0x01, 0x0a, 0x15, 0x42, 0x65, 0x74, 0x53,
	0x6c, 0x69, 0x70, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x4f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x49, 0x64, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x4f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x49, 0x64,
	0x73, 0x12, 0x1c, 0x0a, 0x09, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x73, 0x12,
	0x2b, 0x0a, 0x05, 0x50, 0x61, 0x67, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x6f, 0x6f, 0x6b, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x50, 0x61, 0x67, 0x65, 0x72, 0x52, 0x05, 0x50, 0x61, 0x67, 0x65, 0x72, 0x22, 0xa7, 0x01, 0x0a,
	0x16, 0x42, 0x65, 0x74, 0x53, 0x6c, 0x69, 0x70, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x42,
	0x6f, 0x6f, 0x6b, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x55, 0x0a, 0x13, 0x42, 0x65, 0x74, 0x53, 0x6c, 0x69, 0x70, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73,
	0x70, 0x6f, 0x72, 0x74, 0x42, 0x6f, 0x6f, 0x6b, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x65,
	0x74, 0x53, 0x6c, 0x69, 0x70, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x52, 0x13, 0x42, 0x65, 0x74, 0x53, 0x6c, 0x69, 0x70, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x9f, 0x02, 0x0a, 0x13, 0x42, 0x65, 0x74, 0x53, 0x6c,
	0x69, 0x70, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33,
	0x0a, 0x08, 0x4f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x6f, 0x6f, 0x6b, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x4f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x52, 0x08, 0x4f, 0x75, 0x74, 0x63, 0x6f,
	0x6d, 0x65, 0x73, 0x12, 0x30, 0x0a, 0x07, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x6f, 0x6f, 0x6b,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x52, 0x07, 0x4d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x31, 0x0a, 0x07, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x6f,
	0x6f, 0x6b, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x52,
	0x07, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x12, 0x30, 0x0a, 0x07, 0x53, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x70, 0x6f, 0x72,
	0x74, 0x42, 0x6f, 0x6f, 0x6b, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x52, 0x07, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x12, 0x3c, 0x0a, 0x0b, 0x54, 0x6f,
	0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x6f, 0x6f, 0x6b, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0b, 0x54, 0x6f, 0x75,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x58, 0x0a, 0x07, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x65, 0x73, 0x12, 0x2b, 0x0a, 0x05, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x6f, 0x6f, 0x6b, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x05, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x12, 0x20, 0x0a, 0x0b, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x2a, 0xe3, 0x08, 0x0a, 0x0e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x14, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x4d, 0x61,
	0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x10, 0x00, 0x12,
	0x16, 0x0a, 0x11, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x5f, 0x4f, 0x6b, 0x10, 0xf8, 0x55, 0x12, 0x1e, 0x0a, 0x19, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x42, 0x61, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x10, 0x91, 0x4e, 0x12, 0x20, 0x0a, 0x1b, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x55, 0x6e, 0x61, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x10, 0x92, 0x4e, 0x12, 0x21, 0x0a, 0x1c, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x93, 0x4e, 0x12, 0x26, 0x0a, 0x21,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x55, 0x6e, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c,
	0x65, 0x10, 0x94, 0x4e, 0x12, 0x1d, 0x0a, 0x18, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x47, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x6c, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x10, 0x95, 0x4e, 0x12, 0x12, 0x0a, 0x0d, 0x4e, 0x6f, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x10, 0xc4, 0x5e, 0x12, 0x1f, 0x0a, 0x1a, 0x4c, 0x6f, 0x67, 0x69, 0x6e,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x4f, 0x72, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x78,
	0x70, 0x69, 0x72, 0x65, 0x64, 0x10, 0xc5, 0x5e, 0x12, 0x1b, 0x0a, 0x16, 0x4e, 0x6f, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x46, 0x6f, 0x72, 0x54, 0x68, 0x65, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x10, 0xc6, 0x5e, 0x12, 0x16, 0x0a, 0x11, 0x49, 0x6e, 0x63, 0x6f, 0x72, 0x72, 0x65,
	0x63, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x10, 0xf7, 0x4e, 0x12, 0x13, 0x0a,
	0x0e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10,
	0xf8, 0x4e, 0x12, 0x18, 0x0a, 0x13, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x55, 0x6e, 0x6d, 0x61, 0x72,
	0x73, 0x68, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0xf9, 0x4e, 0x12, 0x10, 0x0a, 0x0b,
	0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0xfa, 0x4e, 0x12, 0x24,
	0x0a, 0x1f, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x43, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x52, 0x65,
	0x61, 0x63, 0x68, 0x54, 0x68, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x10, 0xfb, 0x4e, 0x12, 0x24, 0x0a, 0x1f, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x43, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x52, 0x65, 0x61, 0x63, 0x68, 0x54, 0x68, 0x65, 0x42, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x10, 0xfc, 0x4e, 0x12, 0x20, 0x0a, 0x1b, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x46, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x10, 0xd8, 0x4f, 0x12, 0x25, 0x0a, 0x20,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x49,
	0x6e, 0x73, 0x75, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x6b, 0x65,
	0x10, 0xa9, 0x5f, 0x12, 0x21, 0x0a, 0x1c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x4f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x43, 0x6c, 0x6f,
	0x73, 0x65, 0x64, 0x10, 0xaa, 0x5f, 0x12, 0x22, 0x0a, 0x1d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x44, 0x75,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x10, 0xab, 0x5f, 0x12, 0x1e, 0x0a, 0x19, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x10, 0xac, 0x5f, 0x12, 0x1e, 0x0a, 0x19, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x52, 0x69, 0x73,
	0x6b, 0x45, 0x78, 0x63, 0x65, 0x65, 0x64, 0x10, 0xad, 0x5f, 0x12, 0x1f, 0x0a, 0x1a, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x4f, 0x64, 0x64,
	0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x10, 0xae, 0x5f, 0x12, 0x25, 0x0a, 0x20, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x4c, 0x6f,
	0x77, 0x65, 0x72, 0x54, 0x68, 0x61, 0x6e, 0x4d, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x10,
	0xb9, 0x5f, 0x12, 0x28, 0x0a, 0x23, 0x45, 0x78, 0x63, 0x65, 0x65, 0x64, 0x54, 0x68, 0x65, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x10, 0xb0, 0x5f, 0x12, 0x27, 0x0a, 0x22,
	0x45, 0x78, 0x63, 0x65, 0x65, 0x64, 0x54, 0x68, 0x65, 0x4d, 0x61, 0x78, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x4f, 0x66, 0x54, 0x68, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x42,
	0x65, 0x74, 0x10, 0xb1, 0x5f, 0x12, 0x3e, 0x0a, 0x39, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64,
	0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x4f, 0x72, 0x42, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x4f, 0x66, 0x4f, 0x75, 0x74, 0x72, 0x69, 0x67, 0x68, 0x74, 0x4d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x73, 0x49, 0x6e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x42,
	0x65, 0x74, 0x10, 0xb2, 0x5f, 0x12, 0x1f, 0x0a, 0x1a, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x43,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x47, 0x65, 0x74, 0x54, 0x68, 0x65, 0x4d, 0x61, 0x78, 0x53, 0x74,
	0x61, 0x6b, 0x65, 0x10, 0xb3, 0x5f, 0x12, 0x20, 0x0a, 0x1b, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x5f,
	0x43, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x47, 0x65, 0x74, 0x54, 0x68, 0x65, 0x4d, 0x61, 0x78, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x74, 0x10, 0xe4, 0x4f, 0x12, 0x26, 0x0a, 0x21, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x5f, 0x43, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x47, 0x65, 0x74, 0x54, 0x68, 0x65, 0x4d, 0x75,
	0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x10, 0xe5, 0x4f,
	0x12, 0x29, 0x0a, 0x24, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x43, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x47, 0x65, 0x74, 0x54, 0x68, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x10, 0xe6, 0x4f, 0x12, 0x1c, 0x0a, 0x17, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x5f, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x10, 0xe7, 0x4f, 0x12, 0x1d, 0x0a, 0x18, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x5f, 0x54, 0x68, 0x65, 0x42, 0x65, 0x74, 0x49, 0x44, 0x73, 0x49, 0x73, 0x49, 0x6e,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x10, 0xe8, 0x4f, 0x2a, 0xa9, 0x01, 0x0a, 0x0b, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x15, 0x0a, 0x11, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x45, 0x6e, 0x64, 0x65, 0x64, 0x10, 0x00, 0x12,
	0x1a, 0x0a, 0x16, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x49,
	0x6e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x50, 0x65, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x5f, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x65, 0x64, 0x10, 0x03, 0x12, 0x1b,
	0x0a, 0x17, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x72, 0x75, 0x70, 0x74, 0x65, 0x64, 0x10, 0x04, 0x12, 0x17, 0x0a, 0x13, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x55, 0x6e, 0x6b, 0x6e, 0x6f,
	0x77, 0x6e, 0x10, 0x0a, 0x2a, 0xa6, 0x01, 0x0a, 0x16, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x41,
	0x6e, 0x64, 0x4f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x22, 0x0a, 0x1e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x41, 0x6e, 0x64, 0x4f, 0x75, 0x74, 0x63,
	0x6f, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77,
	0x6e, 0x10, 0x00, 0x12, 0x1f, 0x0a, 0x1b, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x41, 0x6e, 0x64,
	0x4f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x4f, 0x70,
	0x65, 0x6e, 0x10, 0x01, 0x12, 0x24, 0x0a, 0x20, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x41, 0x6e,
	0x64, 0x4f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x53,
	0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x10, 0x02, 0x12, 0x21, 0x0a, 0x1d, 0x4d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x41, 0x6e, 0x64, 0x4f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x5f, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x10, 0x03, 0x2a, 0x96, 0x04,
	0x0a, 0x09, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e,
	0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x5f,
	0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x10, 0x02, 0x12, 0x14,
	0x0a, 0x10, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x54, 0x72, 0x65, 0x62,
	0x6c, 0x65, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x5f, 0x34, 0x66, 0x6f, 0x6c, 0x64, 0x73, 0x10, 0x04, 0x12, 0x14, 0x0a, 0x10, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x35, 0x66, 0x6f, 0x6c, 0x64, 0x73, 0x10, 0x05,
	0x12, 0x14, 0x0a, 0x10, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x36, 0x66,
	0x6f, 0x6c, 0x64, 0x73, 0x10, 0x06, 0x12, 0x14, 0x0a, 0x10, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x5f, 0x37, 0x66, 0x6f, 0x6c, 0x64, 0x73, 0x10, 0x07, 0x12, 0x14, 0x0a, 0x10,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x38, 0x66, 0x6f, 0x6c, 0x64, 0x73,
	0x10, 0x08, 0x12, 0x14, 0x0a, 0x10, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x5f,
	0x39, 0x66, 0x6f, 0x6c, 0x64, 0x73, 0x10, 0x09, 0x12, 0x15, 0x0a, 0x11, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x31, 0x30, 0x66, 0x6f, 0x6c, 0x64, 0x73, 0x10, 0x0a, 0x12,
	0x14, 0x0a, 0x10, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x54, 0x72, 0x69,
	0x78, 0x69, 0x65, 0x10, 0x67, 0x12, 0x14, 0x0a, 0x10, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x5f, 0x59, 0x61, 0x6e, 0x6b, 0x65, 0x65, 0x10, 0x68, 0x12, 0x19, 0x0a, 0x15, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x53, 0x75, 0x70, 0x65, 0x72, 0x59, 0x61,
	0x6e, 0x6b, 0x65, 0x65, 0x10, 0x69, 0x12, 0x13, 0x0a, 0x0f, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x5f, 0x48, 0x65, 0x69, 0x6e, 0x7a, 0x10, 0x6a, 0x12, 0x18, 0x0a, 0x14, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x53, 0x75, 0x70, 0x65, 0x72, 0x48, 0x65,
	0x69, 0x6e, 0x7a, 0x10, 0x6b, 0x12, 0x15, 0x0a, 0x11, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x5f, 0x47, 0x6f, 0x6c, 0x69, 0x61, 0x74, 0x68, 0x10, 0x6c, 0x12, 0x14, 0x0a, 0x10,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x39,
	0x10, 0x6d, 0x12, 0x15, 0x0a, 0x11, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x5f,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x31, 0x30, 0x10, 0x6e, 0x12, 0x16, 0x0a, 0x11, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x50, 0x61, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x10, 0xcb,
	0x01, 0x12, 0x15, 0x0a, 0x10, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4c,
	0x75, 0x63, 0x6b, 0x31, 0x35, 0x10, 0xcc, 0x01, 0x12, 0x15, 0x0a, 0x10, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4c, 0x75, 0x63, 0x6b, 0x33, 0x31, 0x10, 0xcd, 0x01, 0x12,
	0x15, 0x0a, 0x10, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4c, 0x75, 0x63,
	0x6b, 0x36, 0x33, 0x10, 0xce, 0x01, 0x2a, 0xfa, 0x02, 0x0a, 0x09, 0x42, 0x65, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x15, 0x0a, 0x11, 0x42, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x5f, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x42,
	0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x10,
	0x01, 0x12, 0x11, 0x0a, 0x0d, 0x42, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x57,
	0x6f, 0x6e, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x42, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x5f, 0x48, 0x61, 0x6c, 0x66, 0x57, 0x6f, 0x6e, 0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e, 0x42,
	0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x4c, 0x6f, 0x73, 0x74, 0x10, 0x04, 0x12,
	0x16, 0x0a, 0x12, 0x42, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x48, 0x61, 0x6c,
	0x66, 0x4c, 0x6f, 0x73, 0x74, 0x10, 0x05, 0x12, 0x12, 0x0a, 0x0e, 0x42, 0x65, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x5f, 0x56, 0x6f, 0x69, 0x64, 0x10, 0x06, 0x12, 0x1c, 0x0a, 0x18, 0x42,
	0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x53, 0x75,
	0x73, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x10, 0x07, 0x12, 0x19, 0x0a, 0x15, 0x42, 0x65, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x57, 0x6f, 0x6e, 0x44, 0x65, 0x61, 0x64, 0x48, 0x65,
	0x61, 0x74, 0x10, 0x08, 0x12, 0x17, 0x0a, 0x13, 0x42, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x5f, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x65, 0x64, 0x10, 0x09, 0x12, 0x1b, 0x0a,
	0x17, 0x42, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x41, 0x75, 0x74, 0x6f, 0x53,
	0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x10, 0x0a, 0x12, 0x13, 0x0a, 0x0f, 0x42, 0x65,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x46, 0x69, 0x78, 0x65, 0x64, 0x10, 0x0b, 0x12,
	0x1d, 0x0a, 0x19, 0x42, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x4d, 0x61, 0x6e,
	0x75, 0x61, 0x6c, 0x53, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x10, 0x0c, 0x12, 0x1c,
	0x0a, 0x18, 0x42, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x56, 0x6f, 0x75, 0x63,
	0x68, 0x65, 0x72, 0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x64, 0x10, 0x0d, 0x12, 0x15, 0x0a, 0x11,
	0x42, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x43, 0x61, 0x73, 0x68, 0x4f, 0x75,
	0x74, 0x10, 0x0e, 0x2a, 0x8c, 0x03, 0x0a, 0x11, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x56, 0x34, 0x12, 0x18, 0x0a, 0x14, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x41, 0x75, 0x74,
	0x6f, 0x10, 0x00, 0x12, 0x1e, 0x0a, 0x1a, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x49,
	0x6e, 0x10, 0x01, 0x12, 0x1f, 0x0a, 0x1b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4f,
	0x75, 0x74, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x42, 0x65, 0x74, 0x10, 0x03, 0x12, 0x1a, 0x0a,
	0x16, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x5f, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x10, 0x04, 0x12, 0x1e, 0x0a, 0x1a, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x41, 0x64, 0x6a,
	0x75, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x05, 0x12, 0x1b, 0x0a, 0x17, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x43, 0x61, 0x73,
	0x68, 0x4f, 0x75, 0x74, 0x10, 0x06, 0x12, 0x1f, 0x0a, 0x1b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x42, 0x65, 0x74, 0x52, 0x6f, 0x6c,
	0x6c, 0x62, 0x61, 0x63, 0x6b, 0x10, 0x07, 0x12, 0x22, 0x0a, 0x1e, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x53, 0x65, 0x74, 0x74, 0x6c,
	0x65, 0x52, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x10, 0x08, 0x12, 0x1c, 0x0a, 0x18, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x52,
	0x65, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x10, 0x09, 0x12, 0x23, 0x0a, 0x1f, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x56, 0x6f, 0x75,
	0x63, 0x68, 0x65, 0x72, 0x43, 0x61, 0x73, 0x68, 0x42, 0x61, 0x63, 0x6b, 0x10, 0x0a, 0x12, 0x22,
	0x0a, 0x1e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x5f, 0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x46, 0x72, 0x65, 0x65, 0x42, 0x65, 0x74,
	0x10, 0x0b, 0x2a, 0x2d, 0x0a, 0x08, 0x4f, 0x64, 0x64, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b,
	0x0a, 0x07, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x10, 0x00, 0x12, 0x06, 0x0a, 0x02, 0x48,
	0x4b, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x61, 0x6e, 0x10,
	0x02, 0x2a, 0x9b, 0x03, 0x0a, 0x0f, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e,
	0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x10, 0x01, 0x12, 0x17,
	0x0a, 0x13, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x5f, 0x57, 0x6f, 0x6e, 0x10, 0x02, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x48, 0x61, 0x6c, 0x66, 0x57,
	0x6f, 0x6e, 0x10, 0x03, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x4c, 0x6f, 0x73, 0x74, 0x10, 0x04, 0x12, 0x1c,
	0x0a, 0x18, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x5f, 0x48, 0x61, 0x6c, 0x66, 0x4c, 0x6f, 0x73, 0x74, 0x10, 0x05, 0x12, 0x18, 0x0a, 0x14,
	0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f,
	0x56, 0x6f, 0x69, 0x64, 0x10, 0x06, 0x12, 0x22, 0x0a, 0x1e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x53,
	0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x10, 0x07, 0x12, 0x1f, 0x0a, 0x1b, 0x53, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x57, 0x6f,
	0x6e, 0x44, 0x65, 0x61, 0x64, 0x48, 0x65, 0x61, 0x74, 0x10, 0x08, 0x12, 0x1d, 0x0a, 0x19, 0x53,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x43,
	0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x65, 0x64, 0x10, 0x09, 0x12, 0x21, 0x0a, 0x1d, 0x53, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x41, 0x75,
	0x74, 0x6f, 0x53, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x10, 0x0a, 0x12, 0x23, 0x0a,
	0x1f, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x5f, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x53, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x64,
	0x10, 0x0c, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x43, 0x61, 0x73, 0x68, 0x4f, 0x75, 0x74, 0x10, 0x0e, 0x2a,
	0xc3, 0x0a, 0x0a, 0x0f, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x14, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x23, 0x0a,
	0x1f, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65,
	0x5f, 0x46, 0x4f, 0x4f, 0x54, 0x42, 0x41, 0x4c, 0x4c, 0x5f, 0x48, 0x44, 0x50, 0x5f, 0x4f, 0x55,
	0x10, 0x01, 0x12, 0x2a, 0x0a, 0x26, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x46, 0x4f, 0x4f, 0x54, 0x42, 0x41, 0x4c, 0x4c, 0x5f, 0x43,
	0x4f, 0x52, 0x52, 0x45, 0x43, 0x54, 0x5f, 0x53, 0x43, 0x4f, 0x52, 0x45, 0x10, 0x02, 0x12, 0x26,
	0x0a, 0x22, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x79, 0x70,
	0x65, 0x5f, 0x46, 0x4f, 0x4f, 0x54, 0x42, 0x41, 0x4c, 0x4c, 0x5f, 0x33, 0x5f, 0x57, 0x41, 0x59,
	0x5f, 0x48, 0x44, 0x50, 0x10, 0x03, 0x12, 0x26, 0x0a, 0x22, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x46, 0x4f, 0x4f, 0x54, 0x42, 0x41,
	0x4c, 0x4c, 0x5f, 0x48, 0x41, 0x4c, 0x46, 0x5f, 0x46, 0x55, 0x4c, 0x4c, 0x10, 0x04, 0x12, 0x25,
	0x0a, 0x21, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x79, 0x70,
	0x65, 0x5f, 0x46, 0x4f, 0x4f, 0x54, 0x42, 0x41, 0x4c, 0x4c, 0x5f, 0x4f, 0x44, 0x44, 0x5f, 0x45,
	0x56, 0x45, 0x4e, 0x10, 0x05, 0x12, 0x2b, 0x0a, 0x27, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x46, 0x4f, 0x4f, 0x54, 0x42, 0x41, 0x4c,
	0x4c, 0x5f, 0x4e, 0x45, 0x58, 0x54, 0x5f, 0x4c, 0x41, 0x53, 0x54, 0x5f, 0x47, 0x4f, 0x41, 0x4c,
	0x10, 0x06, 0x12, 0x27, 0x0a, 0x23, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x46, 0x4f, 0x4f, 0x54, 0x42, 0x41, 0x4c, 0x4c, 0x5f, 0x47,
	0x4f, 0x41, 0x4c, 0x5f, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x07, 0x12, 0x27, 0x0a, 0x23, 0x4d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x46,
	0x4f, 0x4f, 0x54, 0x42, 0x41, 0x4c, 0x4c, 0x5f, 0x57, 0x49, 0x4e, 0x5f, 0x4d, 0x41, 0x52, 0x47,
	0x49, 0x4e, 0x10, 0x08, 0x12, 0x23, 0x0a, 0x1f, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x46, 0x4f, 0x4f, 0x54, 0x42, 0x41, 0x4c, 0x4c,
	0x5f, 0x43, 0x4f, 0x52, 0x4e, 0x45, 0x52, 0x10, 0x09, 0x12, 0x25, 0x0a, 0x21, 0x4d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x46, 0x4f, 0x4f,
	0x54, 0x42, 0x41, 0x4c, 0x4c, 0x5f, 0x4f, 0x55, 0x54, 0x52, 0x49, 0x47, 0x48, 0x54, 0x10, 0x0a,
	0x12, 0x25, 0x0a, 0x21, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54,
	0x79, 0x70, 0x65, 0x5f, 0x42, 0x41, 0x53, 0x4b, 0x45, 0x54, 0x42, 0x41, 0x4c, 0x4c, 0x5f, 0x48,
	0x44, 0x50, 0x5f, 0x4f, 0x55, 0x10, 0x0b, 0x12, 0x28, 0x0a, 0x24, 0x4d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x42, 0x41, 0x53, 0x4b, 0x45,
	0x54, 0x42, 0x41, 0x4c, 0x5f, 0x57, 0x49, 0x4e, 0x5f, 0x4d, 0x41, 0x52, 0x47, 0x49, 0x4e, 0x10,
	0x0c, 0x12, 0x26, 0x0a, 0x22, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x54, 0x79, 0x70, 0x65, 0x5f, 0x42, 0x41, 0x53, 0x4b, 0x45, 0x54, 0x42, 0x41, 0x4c, 0x5f, 0x4f,
	0x55, 0x54, 0x52, 0x49, 0x47, 0x48, 0x54, 0x10, 0x0d, 0x12, 0x21, 0x0a, 0x1d, 0x4d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x54, 0x45, 0x4e,
	0x4e, 0x49, 0x53, 0x5f, 0x48, 0x44, 0x50, 0x5f, 0x4f, 0x55, 0x10, 0x0e, 0x12, 0x23, 0x0a, 0x1f,
	0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x5f,
	0x54, 0x45, 0x4e, 0x4e, 0x49, 0x53, 0x5f, 0x4f, 0x55, 0x54, 0x52, 0x49, 0x47, 0x48, 0x54, 0x10,
	0x0f, 0x12, 0x2b, 0x0a, 0x27, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x54, 0x79, 0x70, 0x65, 0x5f, 0x41, 0x4d, 0x45, 0x52, 0x49, 0x43, 0x41, 0x5f, 0x46, 0x4f, 0x4f,
	0x54, 0x42, 0x41, 0x4c, 0x4c, 0x5f, 0x48, 0x44, 0x50, 0x5f, 0x4f, 0x55, 0x10, 0x10, 0x12, 0x2d,
	0x0a, 0x29, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x79, 0x70,
	0x65, 0x5f, 0x41, 0x4d, 0x45, 0x52, 0x49, 0x43, 0x41, 0x5f, 0x46, 0x4f, 0x4f, 0x54, 0x42, 0x41,
	0x4c, 0x4c, 0x5f, 0x4f, 0x44, 0x44, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x10, 0x11, 0x12, 0x2d, 0x0a,
	0x29, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65,
	0x5f, 0x41, 0x4d, 0x45, 0x52, 0x49, 0x43, 0x41, 0x5f, 0x46, 0x4f, 0x4f, 0x54, 0x42, 0x41, 0x4c,
	0x4c, 0x5f, 0x4f, 0x55, 0x54, 0x52, 0x49, 0x47, 0x48, 0x54, 0x10, 0x12, 0x12, 0x25, 0x0a, 0x21,
	0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x5f,
	0x49, 0x43, 0x45, 0x5f, 0x48, 0x4f, 0x43, 0x4b, 0x45, 0x59, 0x5f, 0x48, 0x44, 0x50, 0x5f, 0x4f,
	0x55, 0x10, 0x13, 0x12, 0x27, 0x0a, 0x23, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x49, 0x43, 0x45, 0x5f, 0x48, 0x4f, 0x43, 0x4b, 0x45,
	0x59, 0x5f, 0x4f, 0x55, 0x54, 0x52, 0x49, 0x47, 0x48, 0x54, 0x10, 0x14, 0x12, 0x22, 0x0a, 0x1e,
	0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x5f,
	0x53, 0x4e, 0x4f, 0x4f, 0x4b, 0x45, 0x52, 0x5f, 0x48, 0x44, 0x50, 0x5f, 0x4f, 0x55, 0x10, 0x15,
	0x12, 0x24, 0x0a, 0x20, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54,
	0x79, 0x70, 0x65, 0x5f, 0x53, 0x4e, 0x4f, 0x4f, 0x4b, 0x45, 0x52, 0x5f, 0x4f, 0x55, 0x54, 0x52,
	0x49, 0x47, 0x48, 0x54, 0x10, 0x16, 0x12, 0x27, 0x0a, 0x23, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f,
	0x54, 0x45, 0x4e, 0x4e, 0x49, 0x53, 0x5f, 0x48, 0x44, 0x50, 0x5f, 0x4f, 0x55, 0x10, 0x17, 0x12,
	0x2c, 0x0a, 0x28, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x79,
	0x70, 0x65, 0x5f, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x54, 0x45, 0x4e, 0x4e, 0x49, 0x53, 0x5f,
	0x45, 0x58, 0x41, 0x43, 0x54, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x53, 0x10, 0x18, 0x12, 0x29, 0x0a,
	0x25, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65,
	0x5f, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x54, 0x45, 0x4e, 0x4e, 0x49, 0x53, 0x5f, 0x4f, 0x55,
	0x54, 0x52, 0x49, 0x47, 0x48, 0x54, 0x10, 0x19, 0x12, 0x25, 0x0a, 0x21, 0x4d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x56, 0x4f, 0x4c, 0x4c,
	0x45, 0x59, 0x42, 0x41, 0x4c, 0x4c, 0x5f, 0x48, 0x44, 0x50, 0x5f, 0x4f, 0x55, 0x10, 0x1a, 0x12,
	0x27, 0x0a, 0x23, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x79,
	0x70, 0x65, 0x5f, 0x56, 0x4f, 0x4c, 0x4c, 0x45, 0x59, 0x42, 0x41, 0x4c, 0x4c, 0x5f, 0x4f, 0x55,
	0x54, 0x52, 0x49, 0x47, 0x48, 0x54, 0x10, 0x1b, 0x12, 0x24, 0x0a, 0x20, 0x4d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x42, 0x41, 0x44, 0x4d,
	0x49, 0x4e, 0x54, 0x4f, 0x4e, 0x5f, 0x48, 0x44, 0x50, 0x5f, 0x4f, 0x55, 0x10, 0x1c, 0x12, 0x29,
	0x0a, 0x25, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x79, 0x70,
	0x65, 0x5f, 0x42, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x54, 0x4f, 0x4e, 0x5f, 0x45, 0x58, 0x41, 0x43,
	0x54, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x53, 0x10, 0x1d, 0x12, 0x26, 0x0a, 0x22, 0x4d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x42, 0x41, 0x44,
	0x4d, 0x49, 0x4e, 0x54, 0x4f, 0x4e, 0x5f, 0x4f, 0x55, 0x54, 0x52, 0x49, 0x47, 0x48, 0x54, 0x10,
	0x1e, 0x12, 0x27, 0x0a, 0x23, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x54, 0x79, 0x70, 0x65, 0x5f, 0x42, 0x45, 0x41, 0x43, 0x48, 0x5f, 0x56, 0x4f, 0x4c, 0x4c, 0x45,
	0x59, 0x5f, 0x48, 0x44, 0x50, 0x5f, 0x4f, 0x55, 0x10, 0x1f, 0x12, 0x29, 0x0a, 0x25, 0x4d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x42, 0x45,
	0x41, 0x43, 0x48, 0x5f, 0x56, 0x4f, 0x4c, 0x4c, 0x45, 0x59, 0x5f, 0x4f, 0x55, 0x54, 0x52, 0x49,
	0x47, 0x48, 0x54, 0x10, 0x20, 0x2a, 0x51, 0x0a, 0x0a, 0x42, 0x6f, 0x6f, 0x6c, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x14, 0x42, 0x6f, 0x6f, 0x6c, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x5f, 0x4e, 0x6f, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x10, 0x00, 0x12, 0x14, 0x0a,
	0x10, 0x42, 0x6f, 0x6f, 0x6c, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x46, 0x41, 0x4c, 0x53,
	0x45, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x42, 0x6f, 0x6f, 0x6c, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x5f, 0x54, 0x52, 0x55, 0x45, 0x10, 0x02, 0x2a, 0xa5, 0x01, 0x0a, 0x0f, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07,
	0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x57, 0x69, 0x74,
	0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x53, 0x74, 0x61,
	0x6b, 0x65, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x10, 0x03,
	0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x04,
	0x12, 0x0c, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x10, 0x05, 0x12, 0x0b,
	0x0a, 0x07, 0x43, 0x61, 0x73, 0x68, 0x6f, 0x75, 0x74, 0x10, 0x06, 0x12, 0x17, 0x0a, 0x13, 0x42,
	0x65, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x6d, 0x65,
	0x6e, 0x74, 0x10, 0x07, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x5f, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x08,
	0x42, 0x04, 0x5a, 0x02, 0x2e, 0x2f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_new_api_proto_rawDescOnce sync.Once
	file_new_api_proto_rawDescData = file_new_api_proto_rawDesc
)

func file_new_api_proto_rawDescGZIP() []byte {
	file_new_api_proto_rawDescOnce.Do(func() {
		file_new_api_proto_rawDescData = protoimpl.X.CompressGZIP(file_new_api_proto_rawDescData)
	})
	return file_new_api_proto_rawDescData
}

var file_new_api_proto_enumTypes = make([]protoimpl.EnumInfo, 11)
var file_new_api_proto_msgTypes = make([]protoimpl.MessageInfo, 47)
var file_new_api_proto_goTypes = []interface{}{
	(ResponseStatus)(0),               // 0: sportBookProto.ResponseStatus
	(MatchStatus)(0),                  // 1: sportBookProto.MatchStatus
	(MarketAndOutcomeStatus)(0),       // 2: sportBookProto.MarketAndOutcomeStatus
	(OrderType)(0),                    // 3: sportBookProto.OrderType
	(BetStatus)(0),                    // 4: sportBookProto.BetStatus
	(TransactionTypeV4)(0),            // 5: sportBookProto.TransactionTypeV4
	(OddsType)(0),                     // 6: sportBookProto.OddsType
	(SelectionStatus)(0),              // 7: sportBookProto.SelectionStatus
	(MarketGroupType)(0),              // 8: sportBookProto.MarketGroupType
	(BoolFilter)(0),                   // 9: sportBookProto.BoolFilter
	(TransactionType)(0),              // 10: sportBookProto.TransactionType
	(*FilterRequest)(nil),             // 11: sportBookProto.FilterRequest
	(*Pager)(nil),                     // 12: sportBookProto.Pager
	(*MarketsExt)(nil),                // 13: sportBookProto.MarketsExt
	(*MatchAndMarketResponse)(nil),    // 14: sportBookProto.MatchAndMarketResponse
	(*OutrightResponse)(nil),          // 15: sportBookProto.OutrightResponse
	(*MarketGroupResponse)(nil),       // 16: sportBookProto.MarketGroupResponse
	(*MarketGroupData)(nil),           // 17: sportBookProto.MarketGroupData
	(*NullString)(nil),                // 18: sportBookProto.NullString
	(*Tournament)(nil),                // 19: sportBookProto.Tournament
	(*Category)(nil),                  // 20: sportBookProto.Category
	(*StreamInfo)(nil),                // 21: sportBookProto.StreamInfo
	(*Streamings)(nil),                // 22: sportBookProto.Streamings
	(*Match)(nil),                     // 23: sportBookProto.Match
	(*Market)(nil),                    // 24: sportBookProto.Market
	(*Outcome)(nil),                   // 25: sportBookProto.Outcome
	(*OutcomeV4)(nil),                 // 26: sportBookProto.OutcomeV4
	(*IdNamePair)(nil),                // 27: sportBookProto.IdNamePair
	(*NullFloat32)(nil),               // 28: sportBookProto.NullFloat32
	(*Info)(nil),                      // 29: sportBookProto.Info
	(*Wallet)(nil),                    // 30: sportBookProto.Wallet
	(*BalanceResponse)(nil),           // 31: sportBookProto.BalanceResponse
	(*PlaceBetRequest)(nil),           // 32: sportBookProto.PlaceBetRequest
	(*BetLimitResponse)(nil),          // 33: sportBookProto.BetLimitResponse
	(*BetHistoryRequest)(nil),         // 34: sportBookProto.BetHistoryRequest
	(*Response)(nil),                  // 35: sportBookProto.Response
	(*SelectionList)(nil),             // 36: sportBookProto.SelectionList
	(*MultiLineDetail)(nil),           // 37: sportBookProto.MultiLineDetail
	(*PlayerOrders)(nil),              // 38: sportBookProto.PlayerOrders
	(*Order)(nil),                     // 39: sportBookProto.Order
	(*Bet)(nil),                       // 40: sportBookProto.Bet
	(*Selection)(nil),                 // 41: sportBookProto.Selection
	(*TransactionHistoryRequest)(nil), // 42: sportBookProto.TransactionHistoryRequest
	(*MarketGroupRequest)(nil),        // 43: sportBookProto.MarketGroupRequest
	(*Transaction)(nil),               // 44: sportBookProto.Transaction
	(*TransactionHistory)(nil),        // 45: sportBookProto.TransactionHistory
	(*SportMarket)(nil),               // 46: sportBookProto.SportMarket
	(*Season)(nil),                    // 47: sportBookProto.Season
	(*TournamentV4)(nil),              // 48: sportBookProto.TournamentV4
	(*BetDataResponse)(nil),           // 49: sportBookProto.BetDataResponse
	(*SearchEventMatchResponse)(nil),  // 50: sportBookProto.SearchEventMatchResponse
	(*BetSlipRefreshRequest)(nil),     // 51: sportBookProto.BetSlipRefreshRequest
	(*BetSlipRefreshResponse)(nil),    // 52: sportBookProto.BetSlipRefreshResponse
	(*BetSlipDataResponse)(nil),       // 53: sportBookProto.BetSlipDataResponse
	(*Matches)(nil),                   // 54: sportBookProto.Matches
	nil,                               // 55: sportBookProto.MatchAndMarketResponse.MarketExtByTypeIdEntry
	nil,                               // 56: sportBookProto.OutrightResponse.MarketExtByTypeIdEntry
	(*BetLimitResponse_Limit)(nil),    // 57: sportBookProto.BetLimitResponse.Limit
	(*timestamppb.Timestamp)(nil),     // 58: google.protobuf.Timestamp
}
var file_new_api_proto_depIdxs = []int32{
	12, // 0: sportBookProto.FilterRequest.Pager:type_name -> sportBookProto.Pager
	9,  // 1: sportBookProto.FilterRequest.IsLive:type_name -> sportBookProto.BoolFilter
	58, // 2: sportBookProto.FilterRequest.Times:type_name -> google.protobuf.Timestamp
	8,  // 3: sportBookProto.FilterRequest.MarketGroupType:type_name -> sportBookProto.MarketGroupType
	9,  // 4: sportBookProto.FilterRequest.IsOutright:type_name -> sportBookProto.BoolFilter
	23, // 5: sportBookProto.MatchAndMarketResponse.Matches:type_name -> sportBookProto.Match
	12, // 6: sportBookProto.MatchAndMarketResponse.Pager:type_name -> sportBookProto.Pager
	55, // 7: sportBookProto.MatchAndMarketResponse.MarketExtByTypeId:type_name -> sportBookProto.MatchAndMarketResponse.MarketExtByTypeIdEntry
	19, // 8: sportBookProto.OutrightResponse.Tournaments:type_name -> sportBookProto.Tournament
	12, // 9: sportBookProto.OutrightResponse.Pager:type_name -> sportBookProto.Pager
	56, // 10: sportBookProto.OutrightResponse.MarketExtByTypeId:type_name -> sportBookProto.OutrightResponse.MarketExtByTypeIdEntry
	0,  // 11: sportBookProto.MarketGroupResponse.Status:type_name -> sportBookProto.ResponseStatus
	17, // 12: sportBookProto.MarketGroupResponse.MarketGroupDatas:type_name -> sportBookProto.MarketGroupData
	24, // 13: sportBookProto.Tournament.Markets:type_name -> sportBookProto.Market
	19, // 14: sportBookProto.Category.Tournaments:type_name -> sportBookProto.Tournament
	21, // 15: sportBookProto.Streamings.Streaming:type_name -> sportBookProto.StreamInfo
	1,  // 16: sportBookProto.Match.StatusId:type_name -> sportBookProto.MatchStatus
	58, // 17: sportBookProto.Match.KickoffTime:type_name -> google.protobuf.Timestamp
	24, // 18: sportBookProto.Match.Markets:type_name -> sportBookProto.Market
	29, // 19: sportBookProto.Match.Infos:type_name -> sportBookProto.Info
	22, // 20: sportBookProto.Match.streamings:type_name -> sportBookProto.Streamings
	58, // 21: sportBookProto.Market.StopBetTime:type_name -> google.protobuf.Timestamp
	25, // 22: sportBookProto.Market.Outcomes:type_name -> sportBookProto.Outcome
	2,  // 23: sportBookProto.Market.Status:type_name -> sportBookProto.MarketAndOutcomeStatus
	27, // 24: sportBookProto.Outcome.Teams:type_name -> sportBookProto.IdNamePair
	27, // 25: sportBookProto.Outcome.Players:type_name -> sportBookProto.IdNamePair
	2,  // 26: sportBookProto.Outcome.Status:type_name -> sportBookProto.MarketAndOutcomeStatus
	18, // 27: sportBookProto.OutcomeV4.WinProbability:type_name -> sportBookProto.NullString
	18, // 28: sportBookProto.OutcomeV4.RefundProbability:type_name -> sportBookProto.NullString
	18, // 29: sportBookProto.OutcomeV4.LoseProbability:type_name -> sportBookProto.NullString
	2,  // 30: sportBookProto.OutcomeV4.Status:type_name -> sportBookProto.MarketAndOutcomeStatus
	58, // 31: sportBookProto.OutcomeV4.CreatedAt:type_name -> google.protobuf.Timestamp
	58, // 32: sportBookProto.OutcomeV4.UpdatedAt:type_name -> google.protobuf.Timestamp
	28, // 33: sportBookProto.Info.Value2:type_name -> sportBookProto.NullFloat32
	18, // 34: sportBookProto.Wallet.VerifyHash:type_name -> sportBookProto.NullString
	58, // 35: sportBookProto.Wallet.UpdatedAt:type_name -> google.protobuf.Timestamp
	58, // 36: sportBookProto.Wallet.CreatedAt:type_name -> google.protobuf.Timestamp
	0,  // 37: sportBookProto.BalanceResponse.Status:type_name -> sportBookProto.ResponseStatus
	30, // 38: sportBookProto.BalanceResponse.Wallets:type_name -> sportBookProto.Wallet
	36, // 39: sportBookProto.PlaceBetRequest.Selections:type_name -> sportBookProto.SelectionList
	37, // 40: sportBookProto.PlaceBetRequest.BetDetails:type_name -> sportBookProto.MultiLineDetail
	6,  // 41: sportBookProto.PlaceBetRequest.OddsType:type_name -> sportBookProto.OddsType
	0,  // 42: sportBookProto.BetLimitResponse.Status:type_name -> sportBookProto.ResponseStatus
	57, // 43: sportBookProto.BetLimitResponse.Limits:type_name -> sportBookProto.BetLimitResponse.Limit
	58, // 44: sportBookProto.BetHistoryRequest.StartTime:type_name -> google.protobuf.Timestamp
	58, // 45: sportBookProto.BetHistoryRequest.EndTime:type_name -> google.protobuf.Timestamp
	12, // 46: sportBookProto.BetHistoryRequest.Pager:type_name -> sportBookProto.Pager
	0,  // 47: sportBookProto.Response.Status:type_name -> sportBookProto.ResponseStatus
	3,  // 48: sportBookProto.MultiLineDetail.Type:type_name -> sportBookProto.OrderType
	0,  // 49: sportBookProto.PlayerOrders.Status:type_name -> sportBookProto.ResponseStatus
	39, // 50: sportBookProto.PlayerOrders.Orders:type_name -> sportBookProto.Order
	12, // 51: sportBookProto.PlayerOrders.Pager:type_name -> sportBookProto.Pager
	3,  // 52: sportBookProto.Order.OrderType:type_name -> sportBookProto.OrderType
	58, // 53: sportBookProto.Order.BetTime:type_name -> google.protobuf.Timestamp
	58, // 54: sportBookProto.Order.SettledTime:type_name -> google.protobuf.Timestamp
	41, // 55: sportBookProto.Order.Selections:type_name -> sportBookProto.Selection
	40, // 56: sportBookProto.Order.Bets:type_name -> sportBookProto.Bet
	6,  // 57: sportBookProto.Order.OddsType:type_name -> sportBookProto.OddsType
	4,  // 58: sportBookProto.Bet.Status:type_name -> sportBookProto.BetStatus
	58, // 59: sportBookProto.Bet.SettledTime:type_name -> google.protobuf.Timestamp
	58, // 60: sportBookProto.Selection.KickoffTime:type_name -> google.protobuf.Timestamp
	7,  // 61: sportBookProto.Selection.Status:type_name -> sportBookProto.SelectionStatus
	58, // 62: sportBookProto.TransactionHistoryRequest.StartTime:type_name -> google.protobuf.Timestamp
	58, // 63: sportBookProto.TransactionHistoryRequest.EndTime:type_name -> google.protobuf.Timestamp
	12, // 64: sportBookProto.TransactionHistoryRequest.Pager:type_name -> sportBookProto.Pager
	0,  // 65: sportBookProto.Transaction.Status:type_name -> sportBookProto.ResponseStatus
	45, // 66: sportBookProto.Transaction.Historys:type_name -> sportBookProto.TransactionHistory
	12, // 67: sportBookProto.Transaction.Pager:type_name -> sportBookProto.Pager
	5,  // 68: sportBookProto.TransactionHistory.TransType:type_name -> sportBookProto.TransactionTypeV4
	58, // 69: sportBookProto.TransactionHistory.TransTime:type_name -> google.protobuf.Timestamp
	58, // 70: sportBookProto.Season.StartDate:type_name -> google.protobuf.Timestamp
	58, // 71: sportBookProto.Season.EndDate:type_name -> google.protobuf.Timestamp
	18, // 72: sportBookProto.TournamentV4.Logo:type_name -> sportBookProto.NullString
	26, // 73: sportBookProto.BetDataResponse.Outcomes:type_name -> sportBookProto.OutcomeV4
	24, // 74: sportBookProto.BetDataResponse.Markets:type_name -> sportBookProto.Market
	23, // 75: sportBookProto.BetDataResponse.Matches:type_name -> sportBookProto.Match
	47, // 76: sportBookProto.BetDataResponse.Seasons:type_name -> sportBookProto.Season
	48, // 77: sportBookProto.BetDataResponse.Tournaments:type_name -> sportBookProto.TournamentV4
	14, // 78: sportBookProto.SearchEventMatchResponse.result:type_name -> sportBookProto.MatchAndMarketResponse
	12, // 79: sportBookProto.BetSlipRefreshRequest.Pager:type_name -> sportBookProto.Pager
	0,  // 80: sportBookProto.BetSlipRefreshResponse.Status:type_name -> sportBookProto.ResponseStatus
	53, // 81: sportBookProto.BetSlipRefreshResponse.BetSlipDataResponse:type_name -> sportBookProto.BetSlipDataResponse
	25, // 82: sportBookProto.BetSlipDataResponse.Outcomes:type_name -> sportBookProto.Outcome
	24, // 83: sportBookProto.BetSlipDataResponse.Markets:type_name -> sportBookProto.Market
	54, // 84: sportBookProto.BetSlipDataResponse.Matches:type_name -> sportBookProto.Matches
	47, // 85: sportBookProto.BetSlipDataResponse.Seasons:type_name -> sportBookProto.Season
	19, // 86: sportBookProto.BetSlipDataResponse.Tournaments:type_name -> sportBookProto.Tournament
	23, // 87: sportBookProto.Matches.Match:type_name -> sportBookProto.Match
	13, // 88: sportBookProto.MatchAndMarketResponse.MarketExtByTypeIdEntry.value:type_name -> sportBookProto.MarketsExt
	13, // 89: sportBookProto.OutrightResponse.MarketExtByTypeIdEntry.value:type_name -> sportBookProto.MarketsExt
	90, // [90:90] is the sub-list for method output_type
	90, // [90:90] is the sub-list for method input_type
	90, // [90:90] is the sub-list for extension type_name
	90, // [90:90] is the sub-list for extension extendee
	0,  // [0:90] is the sub-list for field type_name
}

func init() { file_new_api_proto_init() }
func file_new_api_proto_init() {
	if File_new_api_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_new_api_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_new_api_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Pager); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_new_api_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarketsExt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_new_api_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchAndMarketResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_new_api_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OutrightResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_new_api_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarketGroupResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_new_api_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarketGroupData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_new_api_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NullString); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_new_api_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tournament); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_new_api_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Category); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_new_api_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_new_api_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Streamings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_new_api_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Match); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_new_api_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Market); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_new_api_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Outcome); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_new_api_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OutcomeV4); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_new_api_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IdNamePair); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_new_api_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NullFloat32); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_new_api_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Info); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_new_api_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Wallet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_new_api_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BalanceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_new_api_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlaceBetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_new_api_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BetLimitResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_new_api_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BetHistoryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_new_api_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_new_api_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SelectionList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_new_api_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultiLineDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_new_api_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerOrders); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_new_api_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Order); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_new_api_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_new_api_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Selection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_new_api_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionHistoryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_new_api_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarketGroupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_new_api_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Transaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_new_api_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionHistory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_new_api_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SportMarket); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_new_api_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Season); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_new_api_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TournamentV4); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_new_api_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BetDataResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_new_api_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchEventMatchResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_new_api_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BetSlipRefreshRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_new_api_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BetSlipRefreshResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_new_api_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BetSlipDataResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_new_api_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Matches); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_new_api_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BetLimitResponse_Limit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_new_api_proto_rawDesc,
			NumEnums:      11,
			NumMessages:   47,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_new_api_proto_goTypes,
		DependencyIndexes: file_new_api_proto_depIdxs,
		EnumInfos:         file_new_api_proto_enumTypes,
		MessageInfos:      file_new_api_proto_msgTypes,
	}.Build()
	File_new_api_proto = out.File
	file_new_api_proto_rawDesc = nil
	file_new_api_proto_goTypes = nil
	file_new_api_proto_depIdxs = nil
}
